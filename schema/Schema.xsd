<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2007 sp2 (http://www.altova.com) by Kristen Neal (EA Mythic) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
    <!-- Enumerations -->
    <xs:simpleType name="Alignments">
        <xs:restriction base="xs:string">
            <xs:enumeration value="left"/>
            <xs:enumeration value="top"/>
            <xs:enumeration value="center"/>
            <xs:enumeration value="right"/>
            <xs:enumeration value="leftcenter"/>
            <xs:enumeration value="rightcenter"/>
            <xs:enumeration value="bottom"/>
            <xs:enumeration value="bottomleft"/>
            <xs:enumeration value="bottomright"/>
            <xs:enumeration value="middle"/>
            <xs:enumeration value="topleft"/>
            <xs:enumeration value="topcenter"/>
            <xs:enumeration value="topright"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="Events">
        <xs:restriction base="xs:string">
            <xs:enumeration value="OnInitialize"/>
            <xs:enumeration value="OnShutdown"/>
            <xs:enumeration value="OnLButtonUp"/>
            <xs:enumeration value="OnLButtonDown"/>
            <xs:enumeration value="OnHyperLinkClicked"/>
            <xs:enumeration value="OnMouseWheel"/>
            <xs:enumeration value="OnShown"/>
            <xs:enumeration value="OnHidden"/>
            <xs:enumeration value="OnMouseOver"/>
            <xs:enumeration value="OnMouseOverEnd"/>
            <xs:enumeration value="OnMouseDrag"/>
            <xs:enumeration value="OnUpdate"/>
            <xs:enumeration value="OnRButtonUp"/>
            <xs:enumeration value="OnTextChanged"/>
            <xs:enumeration value="OnSelChanged"/>
            <xs:enumeration value="OnKeyEnter"/>
            <xs:enumeration value="OnKeyEscape"/>
            <xs:enumeration value="OnKeyTab"/>
            <xs:enumeration value="OnSlide"/>
            <xs:enumeration value="OnLButtonDblClk"/>
            <xs:enumeration value="OnRButtonDown"/>
            <xs:enumeration value="OnScrollPosChanged"/>
            <xs:enumeration value="OnSetMoving"/>
            <!-- Action Button Events -->
            <xs:enumeration value="OnActionButtonLButtonDown">
                <xs:annotation>
                    <xs:documentation>Callback format: function(buttonIndex)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="OnActionButtonLButtonUp">
                <xs:annotation>
                    <xs:documentation>Callback format: function(buttonIndex)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="OnActionButtonRButtonDown">
                <xs:annotation>
                    <xs:documentation>Callback format: function(buttonIndex)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="OnActionButtonRButtonUp">
                <xs:annotation>
                    <xs:documentation>Callback format: function(buttonIndex)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="OnActionButtonMouseOver">
                <xs:annotation>
                    <xs:documentation>Callback format: function(buttonIndex)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="OnActionButtonMouseOverEnd">
                <xs:annotation>
                    <xs:documentation>Callback format: function(buttonIndex)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="OnMouseEnter"/>
            <xs:enumeration value="OnMouseLeave"/>
            <xs:enumeration value="OnMouseButton"/>
            <xs:enumeration value="OnKeyChar"/>
            <xs:enumeration value="OnKeyDown"/>
            <xs:enumeration value="OnKeyUp"/>
            <xs:enumeration value="OnLoad"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="Inputs">
        <xs:restriction base="xs:string">
            <xs:enumeration value="all"/>
            <xs:enumeration value="nospaces"/>
            <xs:enumeration value="text"/>
            <xs:enumeration value="numbers"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="Layers">
        <xs:restriction base="xs:string">
            <xs:enumeration value="background"/>
            <xs:enumeration value="default"/>
            <xs:enumeration value="secondary"/>
            <xs:enumeration value="popup"/>
            <xs:enumeration value="overlay"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="Scrolling">
        <xs:restriction base="xs:string">
            <xs:enumeration value="horz"/>
            <xs:enumeration value="vert"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="Formats">
        <xs:restriction base="xs:string">
            <xs:enumeration value="icon"/>
            <xs:enumeration value="wstring"/>
            <xs:enumeration value="number"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="Styles">
        <xs:restriction base="xs:string">
            <xs:enumeration value="default"/>
            <xs:enumeration value="comma"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:attribute name="mode" default="">
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:maxLength value="128"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="inherits">
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:maxLength value="128"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="file">
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:maxLength value="128"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="name">
        <xs:simpleType>
            <xs:restriction base="xs:string">
                <xs:maxLength value="128"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:attribute>

    <!-- Base Types -->
    <xs:complexType name="Coords">
        <xs:attribute name="x" type="xs:integer"/>
        <xs:attribute name="y" type="xs:integer"/>
    </xs:complexType>

    <xs:complexType name="ColorType">
        <xs:attribute name="r" type="xs:integer" use="optional" default="255"/>
        <xs:attribute name="g" type="xs:integer" use="optional" default="255"/>
        <xs:attribute name="b" type="xs:integer" use="optional" default="255"/>
        <xs:attribute name="a" type="xs:integer" use="optional" default="255"/>
    </xs:complexType>

    <xs:complexType name="TexturePointType">
        <xs:complexContent>
            <xs:extension base="Coords">
                <xs:attribute name="texture" type="xs:string"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="AbsPointType">
        <xs:complexContent>
            <xs:extension base="Coords"/>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="RelPointType">
        <xs:attribute name="x" type="xs:float"/>
        <xs:attribute name="y" type="xs:float"/>
    </xs:complexType>

    <xs:complexType name="IncludeType">
        <xs:attribute name="file" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The relative file path of the xml file from the location of the main xml file.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="ScriptsType">
        <xs:sequence>
            <xs:element name="Script" type="ScriptType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ScriptType">
        <xs:attribute name="file" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The relative file path of the lua file from the location of the main xml file.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="AssetsType">
        <xs:annotation>
            <xs:documentation>
                This is the container tag for all source file assets.
                Contains: Texture, Font, TextureFont, Icon, MapIcon, and Nif elements.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="Texture" type="AssetType" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="Font" type="FontType" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="TextureFont" type="AssetType" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="Icon" type="IconType" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="MapIcon" type="MapIconType" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="Nif" type="AssetType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="AssetType">
        <xs:attribute name="name" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The name for the asset to be used in other window-element fields.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="file" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The relative file path of the asset file from the location of the main xml file.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="EventHandlersType">
        <xs:sequence maxOccurs="unbounded">
            <xs:element ref="EventHandler" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="EventHandlerType">
        <xs:attribute name="event" type="Events"/>
        <xs:attribute name="function" type="xs:string"/>
    </xs:complexType>

    <xs:complexType name="WindowDefType">
        <xs:attribute ref="file"/>
    </xs:complexType>

    <xs:complexType name="AnimFramesType">
        <xs:annotation>
            <xs:documentation>Defines the coordinate information for each frame in the animation. Each AnimFrame element within this container specifies the position of a single frame in the texture.</xs:documentation>
        </xs:annotation>
        <xs:sequence maxOccurs="unbounded">
            <xs:element ref="AnimFrame"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="AnimFrameType">
        <xs:annotation>
            <xs:documentation>Defines the texture coordinates for a single frame.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="id" type="xs:integer" use="required">
            <xs:annotation>
                <xs:documentation>The frame number (1-based). Identifies which frame is being defined.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="x" type="xs:integer" use="required">
            <xs:annotation>
                <xs:documentation>The x coordinate of the top left of the frame image in the texture.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="y" type="xs:integer" use="required">
            <xs:annotation>
                <xs:documentation>The y coordinate of the top left of the frame image in the texture.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="SizeType">
        <xs:choice>
            <xs:element ref="AbsPoint"/>
            <xs:element ref="RelPoint"/>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="FontType">
        <xs:complexContent>
            <xs:extension base="AssetType">
                <xs:attribute name="face" type="xs:string" use="required"/>
                <xs:attribute name="height" type="xs:integer" use="required"/>
                <xs:attribute name="texsize" type="xs:integer" use="required"/>
                <xs:attribute name="bold" type="xs:boolean" use="optional"/>
                <xs:attribute name="italic" type="xs:boolean" use="optional"/>
                <xs:attribute name="outline" type="xs:boolean" use="optional"/>
                <xs:attribute name="antialias" type="xs:boolean" use="optional"/>
                <xs:attribute name="hinting" type="xs:boolean" use="optional"/>
                <xs:attribute name="shadow" type="xs:boolean" use="optional"/>
                <xs:attribute name="autohinting" type="xs:boolean" use="optional"/>
                <xs:attribute name="shadowsize" type="xs:integer" use="optional"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="AnchorsType">
        <xs:sequence maxOccurs="unbounded">
            <xs:element ref="Anchor"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="AnchorType">
        <xs:choice minOccurs="0">
            <xs:element ref="AbsPoint"/>
            <xs:element ref="RelPoint"/>
        </xs:choice>
        <xs:attribute name="point" type="Alignments" use="optional"/>
        <xs:attribute name="relativeTo" type="xs:string" use="optional"/>
        <xs:attribute name="relativePoint" type="Alignments" use="optional"/>
    </xs:complexType>

    <xs:complexType name="IconType">
        <xs:attribute name="id" type="xs:integer" default="0"/>
        <xs:attribute name="texture" type="xs:string"/>
        <xs:attribute name="x" type="xs:integer"/>
        <xs:attribute name="y" type="xs:integer"/>
    </xs:complexType>

    <xs:complexType name="MapIconType">
        <xs:attribute name="id" type="xs:integer" default="0"/>
        <xs:attribute name="texture" type="xs:string"/>
        <xs:attribute name="textureX" type="xs:integer"/>
        <xs:attribute name="textureY" type="xs:integer"/>
        <xs:attribute name="sizeX" type="xs:integer"/>
        <xs:attribute name="sizeY" type="xs:integer"/>
        <xs:attribute name="pointX" type="xs:integer"/>
        <xs:attribute name="pointY" type="xs:integer"/>
    </xs:complexType>

    <xs:complexType name="SoundType">
        <xs:attribute name="event" type="Events" use="required"/>
        <xs:attribute name="script" type="xs:string" use="optional"/>
    </xs:complexType>

    <xs:complexType name="SoundsType">
        <xs:sequence maxOccurs="unbounded">
            <xs:element ref="Sound" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="WindowsType">
        <xs:sequence>
            <xs:choice maxOccurs="unbounded">
                <xs:element ref="Window"/>
                <xs:element ref="Button"/>
                <xs:element ref="AnimatedImage"/>
                <xs:element ref="ActionButtonGroup"/>
                <xs:element ref="CircleImage"/>
                <xs:element ref="ColorPicker"/>
                <xs:element ref="ComboBox"/>
                <xs:element ref="DockableWindow"/>
                <xs:element ref="DynamicImage"/>
                <xs:element ref="EditBox"/>
                <xs:element ref="FixedFontLabel"/>
                <xs:element ref="FullResizeImage"/>
                <xs:element ref="HorizontalResizeImage"/>
                <xs:element ref="HorizontalScrollbar"/>
                <xs:element ref="HorizontalScrollWindow"/>
                <xs:element ref="Label"/>
                <xs:element ref="ListBox"/>
                <xs:element ref="LogDisplay"/>
                <xs:element ref="MapDisplay"/>
                <xs:element ref="MaskWindow"/>
                <xs:element ref="PageWindow"/>
                <xs:element ref="ScrollWindow"/>
                <xs:element ref="SliderBar"/>
                <xs:element ref="StatusBar"/>
                <xs:element ref="VerticalResizeImage"/>
                <xs:element ref="VerticalScrollbar"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <!-- Base Window Type -->
    <xs:complexType name="BaseWindowType">
        <xs:annotation>
            <xs:documentation>
                Window is the base level window definition. All other window elements inherit from 'Window', and therefore contain all of the attributes, elements, data members, and support all the same functions.

                Window is the base level window definition. All other window components also have Window definitions.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element ref="Size" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>The size of the window.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element ref="Anchors" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        The anchors of the window. Anchors allow you to position windows in relation to other windows or their parent.
                        It is valid to have either one or two anchors on a window.
                        If a window has two anchors, the window will be automatically resized to fit the two parameters.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="TintColor" type="ColorType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        The tint color of the window. This color is applied to any textures displayed by the window.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element ref="Windows" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        The nested windows of the window. This element allows you to create a hierarchy of window elements.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element ref="EventHandlers" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>
                        Event handlers for the Window. Allows registration of callbacks for various window events.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>
                    <![CDATA[ Name of the window. Must be unique across the entire interface.

                    Inside of a name tag you may insert the "$parent" tag to pre-pend the parent window's name. For example, the following two code segments result in the same window name:

                    <Window name="TargetWindow">
                        <Windows>
                            <Window name="$parentBackground"/>
                        </Windows>
                    </Window>

                    <Window name="TargetWindow">
                        <Windows>
                            <Window name="TargetWindowBackground"/>
                        </Windows>
                    </Window>]]>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="inherits" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    Allows you to inherit attributes from another window element. The inheritance type must be of the same window type you are creating.
                    For example, a button may only inherit a button definition, while a label may only inherit a label definition.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="layer" type="Layers" use="optional" default="default">
            <xs:annotation>
                <xs:documentation>
                    This defines the UI layer for the window. All windows in a single layer are drawn on top of all layers below them.
                    Within a single layer, windows can be set to popable such that they can be clicked on and brought to the top of their layer's draw order.
                    This is most often used for secondary windows on the UI.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="movable" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    Allows the window to be moved by clicking and dragging. Windows that are set to movable will always handle LButtonDown and LButtonUp events,
                    clicks inside a movable window will never go through to the world.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="popable" type="xs:boolean" use="optional" default="true">
            <xs:annotation>
                <xs:documentation>
                    Pops the window to the top of the layer when clicked. The window will be moved to the top of its layer's draw order.
                    This is the same as clicking on a window to bring it into focus. By setting 'popable' to false, you can enforce the draw order of windows within the same layer.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="taborder" type="xs:integer" use="optional">
            <xs:annotation>
                <xs:documentation>
                    The order through which tab cycles focus. For a given window, all child elements may have a tab order value set on them.
                    When a tab order is set, the first element in the order will automatically gain focus when the window is shown.
                    This is useful for defaulting the focus to an edit box when you open up a window.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="id" type="xs:integer" use="optional">
            <xs:annotation>
                <xs:documentation>
                    A numerical id number, needs not be unique. This is most commonly used for creating a single callback for a series of elements.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="handleinput" type="xs:boolean" use="optional" default="true">
            <xs:annotation>
                <xs:documentation>
                    Should the window element process mouse events? When set to false, this will prevent the UI from processing any click and mouseover events within this window or any of its children.
                    This flag is most useful for two purposes:
                    - If this is a first level window, allow the player to click always click through the window into the world.
                    - To build complex window elements that consist of several pieces, but force the mouse to respond to their parent.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="skipinput" type="xs:boolean" use="optional">
            <xs:annotation>
                <xs:documentation>
                    This flag allows a window to pass input to its child elements without handling it itself.
                    Child windows still must be contained within their parent to receive clicks, but the parent window will neither process button clicks or mouse over.
                    This is useful for creating large container windows that are used only for layout purposes and will not process button events.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="sticky" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    When set to true, this attribute determines whether or not the window can move off the screen.
                    Windows that are sticky will be constrained to always remain visible on screen.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="drawwhenhidden" type="xs:boolean" use="optional">
            <xs:annotation>
                <xs:documentation>
                    When set to true, the window will continue to be drawn even when its parent is hidden.
                    This is useful for creating windows that need to remain visible regardless of parent state.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="alpha" type="xs:decimal" use="optional">
            <xs:annotation>
                <xs:documentation>
                    Sets the alpha (transparency) value for the window's texture elements. This value is propagated to all child elements as the 'parent alpha' value.
                    A window's alpha and parent alpha values are multiplied to produce the combined alpha result seen on the screen.
                    Value ranges from 0.0 (completely transparent) to 1.0 (completely opaque).
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="scale" type="xs:decimal" use="optional">
            <xs:annotation>
                <xs:documentation>
                    Sets the scale value on the window. This affects the size of the window and all its contents.
                    1.0 is normal size (100%), values greater than 1.0 increase size, values less than 1.0 decrease size.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <!-- Preserve existing attributes from Interface.xsd -->
        <xs:attribute name="draganddrop" type="xs:boolean" use="optional" default="false"/>
        <xs:attribute name="savesettings" type="xs:boolean" use="optional"/>
        <xs:attribute name="frameonly" type="xs:boolean" use="optional"/>
        <xs:attribute name="autosize" type="xs:boolean" use="optional"/>
    </xs:complexType>

    <!-- Add base Window events type -->
    <xs:simpleType name="WindowEvents">
        <xs:restriction base="xs:string">
            <!-- Base window events from Events type -->
        </xs:restriction>
    </xs:simpleType>

    <!-- Combined events type for Window -->
    <xs:simpleType name="WindowCombinedEvents">
        <xs:union memberTypes="Events WindowEvents"/>
    </xs:simpleType>

    <!-- Extended EventHandlerType for Window -->
    <xs:complexType name="WindowEventHandlerType">
        <xs:attribute name="event" type="WindowCombinedEvents" use="required"/>
        <xs:attribute name="function" type="xs:string" use="required"/>
    </xs:complexType>

    <!-- Extended EventHandlersType for Window -->
    <xs:complexType name="WindowEventHandlersType">
        <xs:sequence>
            <xs:element name="EventHandler" type="WindowEventHandlerType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Update WindowType to extend BaseWindowType -->
    <xs:complexType name="WindowType">
        <xs:complexContent>
            <xs:extension base="BaseWindowType"/>
        </xs:complexContent>
    </xs:complexType>

    <!-- Update Button type -->
    <xs:complexType name="ButtonType">
        <xs:annotation>
            <xs:documentation>
                <![CDATA[
        The button element automates generic button functionality, such as swapping texture and font colors automatically according to mouse over and state.

Components

A button is composed of 5 levels of components. A particular button may contain any subset of the available components. In order, top to bottom, these are:

1. The text.
2. The overlay highlight image.
3. The overlay image.
4. The background highlight image.
5. The background image.

Background
```
</region_of_file_to_rewritten_file>

The background layer texture component that is visible at all times. This texture may be in one of four states:
- Disabled: Typically a grayed out version of the Normal artwork.
- Normal: The standard image for when the button is usable.
- Pressed: The mouse is currently over the button or ButtonSetStayDownFlag() is set.
- DisabledPressed: Typically a grayed out version of the Pressed artwork.

Background Highlight

When the mouse is over the button, the highlight layer will be drawn on top of the background layer. Depending on the current pressed state, one of the following will be shown:
- NormalHighlight: The standard mouse over image.
- PressedHighlight: The pressed state mouse over image.

This layering method allows you to create pressed highlight images that are either complete button artwork or 'glow' effects that expose the background layer behind it.

Overlay

The overlay and overlay highlight, if defined, behave the same as the background and background highlight.

Text

The text is always drawn last (on top of everything else), with its color corresponding to the current button state.
      ]]>
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="BaseWindowType">
                <xs:sequence minOccurs="0">
                    <xs:element name="TextOffset" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                The offset for the text within the button dimensions. This allows you to restrict the button text to only the center portion.
                                The offset is the distance subtracted from both the top/bottom and left/right edges of the button.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The x-pixel offset from the top left corner.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="y" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The y-pixel offset from the top left corner.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="OverlayOffset" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                Offset for the overlay/overlayhighlight images. This allows you to use overlays that are smaller or larger than the background images.
                                Note: This element currently DOES NOT WORK in the implementation.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="optional" default="0"/>
                            <xs:attribute name="y" type="xs:integer" use="optional" default="0"/>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="TextColors" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                Text colors for different button states. You can include only the button states that you care about.
                                Any unspecified states will default to white (r=255, g=255, b=255).
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="Normal" type="ColorType" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>The text color for the normal button state.</xs:documentation>
                                    </xs:annotation>
                                </xs:element>
                                <xs:element name="NormalHighlit" type="ColorType" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>The text color for the normal highlighted button state.</xs:documentation>
                                    </xs:annotation>
                                </xs:element>
                                <xs:element name="Pressed" type="ColorType" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>The text color for the pressed button state.</xs:documentation>
                                    </xs:annotation>
                                </xs:element>
                                <xs:element name="PressedHighlit" type="ColorType" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>The text color for the pressed highlighted button state.</xs:documentation>
                                    </xs:annotation>
                                </xs:element>
                                <xs:element name="Disabled" type="ColorType" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>The text color for the disabled button state. Typically gray.</xs:documentation>
                                    </xs:annotation>
                                </xs:element>
                                <xs:element name="DisabledPressed" type="ColorType" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>The text color for the disabled pressed button state.</xs:documentation>
                                    </xs:annotation>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="TexCoords" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                Texture coordinates for different button states (Background/Highlight)
                                The texture field is optional if you have set the backgroundtexture and highlighttexture attributes.</xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="Normal" type="TexturePointType" minOccurs="0"/>
                                <xs:element name="NormalHighlit" type="TexturePointType" minOccurs="0"/>
                                <xs:element name="Pressed" type="TexturePointType" minOccurs="0"/>
                                <xs:element name="PressedHighlit" type="TexturePointType" minOccurs="0"/>
                                <xs:element name="Disabled" type="TexturePointType" minOccurs="0"/>
                                <xs:element name="DisabledPressed" type="TexturePointType" minOccurs="0"/>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="TexSlices" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>Texture slices for different button states (Background/Highlight)</xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="Normal" minOccurs="0">
                                    <xs:complexType>
                                        <xs:attribute name="texture" type="xs:string" use="optional" default=""/>
                                        <xs:attribute name="id" type="xs:string" use="optional" default=""/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="NormalHighlit" minOccurs="0">
                                    <xs:complexType>
                                        <xs:attribute name="texture" type="xs:string" use="optional" default=""/>
                                        <xs:attribute name="id" type="xs:string" use="optional" default=""/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="Pressed" minOccurs="0">
                                    <xs:complexType>
                                        <xs:attribute name="texture" type="xs:string" use="optional" default=""/>
                                        <xs:attribute name="id" type="xs:string" use="optional" default=""/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="PressedHighlit" minOccurs="0">
                                    <xs:complexType>
                                        <xs:attribute name="texture" type="xs:string" use="optional" default=""/>
                                        <xs:attribute name="id" type="xs:string" use="optional" default=""/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="Disabled" minOccurs="0">
                                    <xs:complexType>
                                        <xs:attribute name="texture" type="xs:string" use="optional" default=""/>
                                        <xs:attribute name="id" type="xs:string" use="optional" default=""/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="DisabledPressed" minOccurs="0">
                                    <xs:complexType>
                                        <xs:attribute name="texture" type="xs:string" use="optional" default=""/>
                                        <xs:attribute name="id" type="xs:string" use="optional" default=""/>
                                    </xs:complexType>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="OverlayTexCoords" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>Texture coordinates for different button states (Overlay/OverlayHighlight)</xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="Normal" type="TexturePointType" minOccurs="0"/>
                                <xs:element name="NormalHighlit" type="TexturePointType" minOccurs="0"/>
                                <xs:element name="Pressed" type="TexturePointType" minOccurs="0"/>
                                <xs:element name="PressedHighlit" type="TexturePointType" minOccurs="0"/>
                                <xs:element name="Disabled" type="TexturePointType" minOccurs="0"/>
                                <xs:element name="DisabledPressed" type="TexturePointType" minOccurs="0"/>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="AnimatedImages" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>AnimatedImage definitions to use for different button states</xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="Normal" minOccurs="0">
                                    <xs:complexType>
                                        <xs:attribute name="def" type="xs:string" use="optional" default=""/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="NormalHighlit" minOccurs="0">
                                    <xs:complexType>
                                        <xs:attribute name="def" type="xs:string" use="optional" default=""/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="Pressed" minOccurs="0">
                                    <xs:complexType>
                                        <xs:attribute name="def" type="xs:string" use="optional" default=""/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="PressedHighlit" minOccurs="0">
                                    <xs:complexType>
                                        <xs:attribute name="def" type="xs:string" use="optional" default=""/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="Disabled" minOccurs="0">
                                    <xs:complexType>
                                        <xs:attribute name="def" type="xs:string" use="optional" default=""/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="DisabledPressed" minOccurs="0">
                                    <xs:complexType>
                                        <xs:attribute name="def" type="xs:string" use="optional" default=""/>
                                    </xs:complexType>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="ResizeImages" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>ResizeImage definitions to use for different button states</xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="Normal" type="WindowDefType" minOccurs="0"/>
                                <xs:element name="NormalHighlit" type="WindowDefType" minOccurs="0"/>
                                <xs:element name="Pressed" type="WindowDefType" minOccurs="0"/>
                                <xs:element name="PressedHighlit" type="WindowDefType" minOccurs="0"/>
                                <xs:element name="Disabled" type="WindowDefType" minOccurs="0"/>
                                <xs:element name="DisabledPressed" type="WindowDefType" minOccurs="0"/>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                </xs:sequence>
                <xs:attribute name="mirrorTexCoords" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>
                            Allows you to display a horizontal mirror image of the button textures. This swaps the topleft and bottom left
                            coordinates with those used for the topright and bottomright of the button.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="backgroundtexture" type="xs:string" use="optional" default="">
                    <xs:annotation>
                        <xs:documentation>Name of the UI Texture to use for the background image layer.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="highlighttexture" type="xs:string" use="optional" default="">
                    <xs:annotation>
                        <xs:documentation>Name of the UI Texture to use for the highlight image layer.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="overlaytexture" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>Name of the UI Texture to use for the overlay image layer.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="overlayhighlighttexture" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>Name of the UI Texture to use for the overlay highlight image layer.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="font" type="xs:string" use="optional" default="">
                    <xs:annotation>
                        <xs:documentation>
                            The name of the Font definition to use. This is required if you wish to display text on the button.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="text" type="xs:string" use="optional" default=""/>
                <xs:attribute name="textalign" type="Alignments" use="optional" default="left">
                    <xs:annotation>
                        <xs:documentation>
                            The text alignment. Controls how text is positioned within the button area.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="texturescale" type="xs:float" use="optional" default="1.0">
                    <xs:annotation>
                        <xs:documentation>Optional. Scale of texture artwork (1.0 = 100%). Default: 1.0.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="linespacing" type="xs:integer" use="optional" default="0">
                    <xs:annotation>
                        <xs:documentation>Optional. Override font line spacing (0 = use font default). Default: 0.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="drawchildrenfirst" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>Optional. Draw children before highlight/text (true/false). Default: false.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="autoresize" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>
                            Should the height of the button be automatically resized according to its text? When true, the button will size
                            to fit its text. When false, the button text will be cut off if it reaches the max height.
                            Auto-resize should be used with text-only, horizontal resize, or full resize buttons.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="autoresizewidth" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>
                            Should the width be shrunk automatically to fit its text? When true, the width of the button will be reduced to
                            fit its text. When false, the width of the button will never be reduced.
                            When auto-resizing the width of a button, the button will only size up to its specified dimensions.
                            This attribute only reduces the size when the full width is not needed.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="textAutoFitMinScale" type="xs:decimal" use="optional" default="1.0">
                    <xs:annotation>
                        <xs:documentation>Optional. Minimum font scale for auto-fitting text (1.0 = no scaling). Default: 1.0.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="warnOnTextCropped" type="xs:boolean" use="optional" default="true">
                    <xs:annotation>
                        <xs:documentation>Optional. Log warning if text is cropped (true/false). Default: true.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="drawHighlightOverBackground" type="xs:boolean" use="optional" default="true">
                    <xs:annotation>
                        <xs:documentation>Optional. Draw highlight over background (true/false). Default: true.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Update EditBoxType with all improvements and correct defaults -->
    <xs:complexType name="EditBoxType">
        <xs:annotation>
            <xs:documentation>
                The EditBox is the generic text-input window element. While in focus, the edit box will show a blinking
                cursor and trap (and display) all keyboard input. You can set focus to an edit box by manually calling
                WindowSetFocus(), or by clicking on it with the mouse.

                Keyboard Commands:
                - Basic Arrow Keys: Moves cursor left, right, up, and down in the text.
                - Shift Up/Down Arrow: Moves backward/forward through the input history.
                - Shift Left/Right Arrow: Selects character to the left/right of the cursor.
                - Shift-Control Left/Right Arrow: Selects the entire word to the left/right of the cursor.
                - Control Left/Right Arrow: Moves the cursor one word to the left/right.
                - Home Key: Moves the cursor to the beginning of the text.
                - Shift Home Key: Selects all the text between the cursor location and the beginning of the text.
                - End Key: Moves the cursor to the end of the text.
                - Shift End Key: Selects all the text between the cursor location and the end of the text.
                - Delete Key: Deletes the selected text, or the text immediately after the cursor.
                - Backspace Key: Deletes the selected text, or the text immediately before the cursor.
                - Control Backspace Key: Deletes the entire word before the cursor.
                - Enter Key: Adds the current text to the input history (if a history size is specified).
                - Control-A: Selects all of the text.
                - Control-C: Copies the selected text to the Window's Clipboard.
                - Control-V: Pastes text currently on the Window's Clipboard into the EditBox.
                - Control-X: Cuts the selected text to the Window's Clipboard.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="BaseWindowType">
                <xs:sequence>
                    <xs:element name="TextColor" type="ColorType" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>The color for the text. Default: r=255, g=255, b=255</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="TextOffset" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                The offset for the text within the EditBox dimensions. This allows you to restrict
                                the text to only the center portion. The offset is the distance subtracted from both
                                the top/bottom and left/right edges of the EditBox.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The x-pixel offset from the top left corner.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="y" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The y-pixel offset from the top left corner.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                    <!-- Override EventHandlers to use extended type -->
                    <xs:element name="EventHandlers" type="EditBoxEventHandlersType" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="font" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>The name of the Font definition to use. This attribute is required.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="maxchars" type="xs:integer" use="optional" default="255">
                    <xs:annotation>
                        <xs:documentation>The maximum number of characters allowed to be displayed. Default: 255</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="scrollbar" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>The name of a VerticalScrollBar to use if the text exceeds the height of the window when in vertical scrolling mode. Note: Scrollbars are currently broken for edit boxes.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="background" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>The name of a FullResizeImage to use as a background.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="linespacing" type="xs:integer" use="optional" default="0">
                    <xs:annotation>
                        <xs:documentation>An override value for the font line spacing. If 0, the font height is used.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="password" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>The edit box should work like a password box and display asterisks instead of the actual characters typed.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="scrolling" use="optional" default="horiz">
                    <xs:annotation>
                        <xs:documentation>The scrolling mode to use. "vert": Word-wrap the text. "horiz": Scroll the text horizontally on one line.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="vert"/>
                            <xs:enumeration value="horiz"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
                <xs:attribute name="input" use="optional" default="all">
                    <xs:annotation>
                        <xs:documentation>The type of input this EditBox should accept. "all": Accept all characters. "nospaces": Accepts all characters except for spaces. "text": Accepts only text. "numbers": Accepts only numbers.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="all"/>
                            <xs:enumeration value="nospaces"/>
                            <xs:enumeration value="text"/>
                            <xs:enumeration value="numbers"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
                <xs:attribute name="history" type="xs:integer" use="optional" default="0">
                    <xs:annotation>
                        <xs:documentation>The size of the input history (tracked automatically when the enter key is pressed) to track. 0 means no history.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Update LogDisplayType with all improvements and correct defaults -->
    <xs:complexType name="LogDisplayType">
        <xs:annotation>
            <xs:documentation>
                <![CDATA[The LogDisplay window element provides a simple way to display multiple lines of text in a scrollable window. The system handles scrolling, row creation, and text formatting. It's designed for chat windows or log displays.
                The LogDisplay works in conjuction with the TextLog element to provide the an in-game visual display for the log entries.

- Standard Features
Through the text log display you can do the following...

Specify a Unique Text Color for each Entry type.
Select which filter types you wish to display or hide.
Show multiple TextLogs in one window.  Entries will be ordered by timestamp.
Unlike the ScrollWindow or PageWindow controls, which create rendered version of all the text, the TextLogDisplay only renders the section of text that you actively see on the window.  Internally, the TextLog display parse out the lines for each entry according to the window's font size and dimenions.



- Specialized Features
A scrollbar is automatically created and updated to fit the number of entries.  The LogDisplay also has a number of special features that cater to use for an incoming-chat text window.  These include..

Automatic scrolling to the bottom of the log when new entries are added.
Automatic fading of of the text lines, after they have been visible for a specifed period of time.]]>
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="BaseWindowType">
                <xs:sequence>
                    <xs:element name="TexCoords" minOccurs="0">
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="Background" type="AbsPointType" minOccurs="0"/>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="TextOffset" type="AbsPointType" minOccurs="0"/>
                    <xs:element name="TextColor" type="ColorType" minOccurs="0"/>
                    <xs:element name="ScrollbarOffset">
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer"/>
                            <xs:attribute name="y" type="xs:integer"/>
                        </xs:complexType>
                    </xs:element>
                </xs:sequence>
                <xs:attribute name="font" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Font to use for the display text. Required.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="scrollbar" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>Name of a VerticalScrollBar to link to this display for scrolling.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="background" type="xs:string" use="optional"/>
                <xs:attribute name="maxchars" type="xs:integer" use="optional" default="255"/>
                <xs:attribute name="linespacing" type="xs:integer" use="optional" default="0">
                    <xs:annotation>
                        <xs:documentation>Number of pixels to space between lines in the display. Default is 0.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="textFadeTime" type="xs:float" use="optional"/>
                <xs:attribute name="scrollbarPosition" type="xs:string" use="optional" default=""/>
                <xs:attribute name="wordwrap" type="xs:boolean" use="optional"/>
                <xs:attribute name="maxentries" type="xs:integer" use="optional" default="200"/>
                <xs:attribute name="maxlines" type="xs:integer" use="optional" default="100">
                    <xs:annotation>
                        <xs:documentation>Maximum number of lines to display. Default is 100.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="linecount" type="xs:integer" use="optional" default="10">
                    <xs:annotation>
                        <xs:documentation>Number of lines visible in the display. Default is 10.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="timestamp" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>Whether to display timestamps in front of each message. Default is false.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="showtimestamp" type="xs:boolean" use="optional" default="true">
                    <xs:annotation>
                        <xs:documentation>Controls timestamp visibility. Default is true.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="timestampfont" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>Font to use for timestamp display. Default uses the same font as the log messages.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="timestampcolor" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>Color to use for timestamp text. Default is DEFAULT_FONT_COLOR in Constants.xml.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="leftpadding" type="xs:integer" use="optional" default="0">
                    <xs:annotation>
                        <xs:documentation>Amount of space to leave in pixels from the left edge of the display. Default is 0.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="ismarkup" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>Whether to process the text as markup. Default is false.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="autoHideScrollBar" type="xs:boolean" use="optional" default="false"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Update LabelType to extend BaseWindowType -->
    <!-- <xs:complexType name="LabelType">
         <xs:complexContent>
             <xs:extension base="BaseWindowType">
                 <xs:sequence>
                     <xs:element ref="Color" minOccurs="0"/>
                     <xs:element name="LinkColor" type="ColorType" minOccurs="0"/>
                     <xs:element name="LinkHighlightColor" type="ColorType" minOccurs="0"/>
                 </xs:sequence>
                 <xs:attribute name="font" type="xs:string" use="optional" default=""/>
                 <xs:attribute name="maxchars" type="xs:integer" use="optional" default="0"/>
                 <xs:attribute name="text" type="xs:string" use="optional" default=""/>
                 <xs:attribute name="textalign" type="Alignments" use="optional" default=""/>
                 <xs:attribute name="wordwrap" type="xs:boolean" use="optional"/>
                 <xs:attribute name="autoresize" type="xs:boolean" use="optional"/>
                 <xs:attribute name="autoresizewidth" type="xs:boolean" use="optional"/>
                 <xs:attribute name="linespacing" type="xs:integer" use="optional" default="0"/>
             </xs:extension>
         </xs:complexContent>
     </xs:complexType>-->
    <xs:complexType name="FixedFontLabelType">
        <xs:annotation>
            <xs:documentation>
                The FixedFontLabel is an extension of the Label element that restricts the font.
                This is desirable for text elements that use scaling animation. If you intend to
                scale your Label often, you may consider a FixedFontLabel instead.

                In general, anything that functions for a Label will work on a FixedFontLabel.
                Refer to the Label documentation for attributes, elements, and functions.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="LabelType">
                <xs:attribute name="inherits">
                    <xs:annotation>
                        <xs:documentation>Optional. Name of another FixedFontLabel or Label definition to inherit from.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string"/>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="ListColumnType">
        <xs:attribute name="windowname" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The name of a child-element of the rowdef.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="variable" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The name of a lua-variable within each index of the data table.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="format" use="required">
            <xs:annotation>
                <xs:documentation>The data-type of the variable.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="icon"/>
                    <xs:enumeration value="wstring"/>
                    <xs:enumeration value="number"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="style">
            <xs:annotation>
                <xs:documentation>The style for number displays.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="default"/>
                    <xs:enumeration value="comma"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="ListColumnsType">
        <xs:sequence>
            <xs:element name="ListColumn" type="ListColumnType" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="ListDataType">
        <xs:annotation>
            <xs:documentation>
                <![CDATA[This element describes how the data should be displayed in each row. Connects the row's UI elements to specific data members. When the list box is updated/scrolled, these window elements are updated automatically to display the data.]]>
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element ref="ListColumns"/>
        </xs:sequence>
        <xs:attribute name="table" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The name of the Lua-Table variable that will contain the list data.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="populationfunction" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>An optional callback function to allow lua to modify how the rows are displayed.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="ListType">
        <xs:annotation>
            <xs:documentation>
                <![CDATA[The ListBox window element provides an automated way of viewing large tables of data without manually allocating large numbers of window elements for the display. It automatically populates text and icon elements within each row through the ListData binding.]]>
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="WindowType">
                <xs:sequence>
                    <xs:element ref="ListData"/>
                </xs:sequence>
                <xs:attribute name="rowdef" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>The name of a Window to use as a template for each row in the display. Child elements of this Window are referenced by the windowname param in the ListData element.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="scrollbar" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>The name of a VerticalScrollBar to use if the number of items in the list extends past the number of visible items.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="rowcount" type="xs:integer" use="optional" default="0">
                    <xs:annotation>
                        <xs:documentation>The maximum number of items in the list to display.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="visiblerows" type="xs:integer" use="optional" default="0">
                    <xs:annotation>
                        <xs:documentation>The number of rows visible on the display at a time.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="rowspacing" type="xs:integer" use="optional" default="0">
                    <xs:annotation>
                        <xs:documentation>Size of the space to leave between rows.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="inherits">
                    <xs:annotation>
                        <xs:documentation>Optional. Name of another ListBox definition to inherit from.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string"/>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <!-- Add ScrollbarType as base for both vertical and horizontal scrollbars -->
    <xs:complexType name="ScrollbarType">
        <xs:complexContent>
            <xs:extension base="BaseWindowType">
                <xs:sequence>
                    <xs:element name="ThumbOffset" type="AbsPointType" minOccurs="0"/>
                    <xs:element name="ActiveZoneOffset" type="AbsPointType" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="up" type="xs:string" use="optional" default=""/>
                <xs:attribute name="down" type="xs:string" use="optional" default=""/>
                <xs:attribute name="thumb" type="xs:string" use="optional" default=""/>
                <xs:attribute name="gutter" type="xs:string" use="optional" default=""/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <!-- Update VerticalScrollbarType to extend ScrollbarType -->
    <xs:complexType name="VerticalScrollbarType">
        <xs:complexContent>
            <xs:extension base="ScrollbarType"/>
        </xs:complexContent>
    </xs:complexType>
    <!-- Update HorizontalScrollbarType to extend ScrollbarType -->
    <xs:complexType name="HorizontalScrollbarType">
        <xs:annotation>
            <xs:documentation>
                <![CDATA[ The HorizontalScrollbar is a combination window element that automates a scroll bar functionality.
                While scroll bars can be used independently, they are most often used as a component of other
                scrolling windows such as the HorizontalScrollWindow.

                Components:
                - A Button definition for the up arrow
                - A Button definition for the down arrow
                - A HorizontalResizeImage for the background of the scrollbar
                - A HorizontalResizeImage for the scroll thumb

                When a scrollbar is sized, the background image resizes to fit it's dimensions.  When used as part of annother window element, the scrollbar's thumb will automatically size and position itself to reflect it's parent window's data.

                When using a scrollbar on it's own through lua, you need to set the following values according to your data
                lineSize	The height of a single line.  (Use HorizontalScrollbarSetLineSize() and HorizontalScrollbarGetLineSize())
                pageSize	The height for a full page.  (Use HorizontalScrollbarSetPageSize() and <HorizontalScrollbarGetPageLineSize()>)
                maxScroll	The maximum value of your scroll range.  (Use HorizontalScrollbarSetMaxScrollPosition() and HorizontalScrollbarGetMaxScrollPosition())]]>
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="WindowType">
                <xs:sequence>
                    <xs:element name="UpOffset" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                The offset for the UpButton from the top of the scrollbar window.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The x pixel offset from the top left corner of the window</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="y" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The y pixel offset from the top left corner of the window</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="DownOffset" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                The offset for the DownButton from the bottom left of the scrollbar window.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The x pixel offset from the bottom left corner of the window</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="y" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The y pixel offset from the bottom left corner of the window</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="ThumbOffset" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                The offset for the Thumb from the topleft of the scrollbar window.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The x pixel offset from the top left corner of the window</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="y" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The y pixel offset from the top left corner of the window</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="ActiveZoneOffset" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                The ActiveZone is the area outside of the scrollbar's dimensions that you can still click
                                and drag the scrollbar. Windows seems to have an active zone of about 100 pixels on either side of a scrollbar.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The x pixel distance on either side of the scrollbar</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="y" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The y pixel distance on either side of the scrollbar</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="EventHandlers" type="EventHandlersType" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                Event handlers for the scrollbar. The HorizontalScrollBar supports all standard window events plus:
                                - OnScrollPosChanged: Called when the scroll position has changed. Callback format: function(scrollPos) where scrollPos is the current scroll position (1 through the scroll size / page size).
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                </xs:sequence>
                <xs:attribute name="up" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Name of the Button definition to use for the up button.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="down" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Name of the Button definition to use for the down button.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="thumb" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Name of the HorizontalResizeImage definition to use for the scaling scrollbar thumb.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="gutter" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Name of the HorizontalResizeImage definition to use for the background for the scroll area.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="inherits">
                    <xs:annotation>
                        <xs:documentation>Optional. Name of another HorizontalScrollbar definition to inherit from.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string"/>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Add HorizontalScrollbar specific events type -->
    <xs:simpleType name="HorizontalScrollbarEvents">
        <xs:restriction base="xs:string">
            <xs:enumeration value="OnScrollPosChanged">
                <xs:annotation>
                    <xs:documentation>Called when the scroll position has changed. Callback format: function(scrollPos) where scrollPos is the current scroll position (1 through the scroll size / page size).</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <!-- Combined events type for HorizontalScrollbar -->
    <xs:simpleType name="HorizontalScrollbarCombinedEvents">
        <xs:union memberTypes="Events HorizontalScrollbarEvents"/>
    </xs:simpleType>

    <!-- Extended EventHandlerType for HorizontalScrollbar -->
    <xs:complexType name="HorizontalScrollbarEventHandlerType">
        <xs:attribute name="event" type="HorizontalScrollbarCombinedEvents" use="required"/>
        <xs:attribute name="function" type="xs:string" use="required"/>
    </xs:complexType>

    <!-- Extended EventHandlersType for HorizontalScrollbar -->
    <xs:complexType name="HorizontalScrollbarEventHandlersType">
        <xs:sequence>
            <xs:element name="EventHandler" type="HorizontalScrollbarEventHandlerType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="AnimatedImageType">
        <xs:annotation>
            <xs:documentation>AnimatedImage is a window element that automates flip-book style animations. It changes the texture coordinates for a given texture to produce frame-by-frame animation effects.</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="BaseWindowType">
                <xs:sequence>
                    <xs:element ref="AnimFrames" minOccurs="0"/>
                    <xs:element name="TexDims" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>Explicit dimensions for each frame's texture section, overrides textureScale. When this element is included, any textureScale value will be ignored.</xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="required">
                                <xs:annotation>
                                    <xs:documentation>The width of the texture in pixels.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="y" type="xs:integer" use="required">
                                <xs:annotation>
                                    <xs:documentation>The height of the texture in pixels.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                </xs:sequence>
                <xs:attribute name="texture" type="xs:string" use="optional" default="">
                    <xs:annotation>
                        <xs:documentation>Name of the UI Texture definition containing all frames. All frames for the animation must reside in a single texture. Default: ""</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="mirrorTexCoords" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>Mirror texture coordinates horizontally (true/false). Swaps the topleft and bottom left coordinates with those used for the topright and bottomright of the image. Default: false.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="textureScale" type="xs:float" use="optional" default="1.0">
                    <xs:annotation>
                        <xs:documentation>Scale of the texture artwork (1.0 = 100%). This is multiplied by the image's &lt;Size&gt; to determine the texture dimensions. Default: 1.0. Ignored if TexDims is set.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="filtering" type="xs:boolean" use="optional" default="true">
                    <xs:annotation>
                        <xs:documentation>Use bilinear filtering (true) or nearest neighbor (false). Controls the blend mode used for this texture when rendering. Default: true.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="fps" type="xs:float" use="optional" default="1.0">
                    <xs:annotation>
                        <xs:documentation>Frames per second for the animation. Controls the playback speed of the animation. Default: 1.0.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="DynamicImageType">
        <xs:annotation>
            <xs:documentation>The DynamicImage provides a rectangular shaped display for a texture.</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="BaseWindowType">
                <xs:sequence>
                    <xs:element name="TexCoords" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>The texture coordinates for the top-left corner within the texture atlas. These coordinates define where in the texture atlas the image should start. Ignored if a slice is set.</xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="required">
                                <xs:annotation>
                                    <xs:documentation>The x pixel coordinate of the top left of the image. Default: 0</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="y" type="xs:integer" use="required">
                                <xs:annotation>
                                    <xs:documentation>The y pixel coordinate of the top left of the image. Default: 0</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="TexDims" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>The explicit texture dimensions to use for this image, regardless of its size. When this element is included, any textureScale value will be ignored. This element is itself ignored if a slice is set.</xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="required">
                                <xs:annotation>
                                    <xs:documentation>The x pixel texture size. Default: 0</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="y" type="xs:integer" use="required">
                                <xs:annotation>
                                    <xs:documentation>The y pixel texture size. Default: 0</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                </xs:sequence>
                <xs:attribute name="texture" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>Name of the UI Texture definition to display. Expects a string value, which is the name of a valid UI Texture. Default: "" (empty string)</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="slice" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>Name of a Slice within the Texture definition to display. Expects a string value, which is the name of a &lt;Slice&gt; declared in the Texture definition. When specified, this overrides texture coordinates and dimensions. Default: "" (empty string)</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="mirrorTexCoords" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>Allows you to display a horizontal mirror image of the texture. This swaps the topleft and bottom left coordinates with those used for the topright and bottomright of the image. Default: false</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="textureScale" type="xs:decimal" use="optional" default="1.0">
                    <xs:annotation>
                        <xs:documentation>The scale of the texture to be used for the image artwork. This is multiplied by the image's Size to determine the texture dimensions. (1.0 = 100%). Default: 1.0. Ignored if TexDims is set or if a slice is specified.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="filtering" type="xs:boolean" use="optional" default="true">
                    <xs:annotation>
                        <xs:documentation>Allows you to specify the blend mode used for this texture when rendering. Use bilinear filtering (true) or nearest neighbor (false). Default: true</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="oneToOnePixels" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>The pixels from the texture will be directly mapped to the screen pixels. The texture will be tiled or cropped when the resolution is changed, rather than being stretched or shrunk. Default: false</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="CircleImageType">
        <xs:annotation>
            <xs:documentation>A window element that renders a circular or partial circular image using a texture.</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="WindowType">
                <xs:sequence>
                    <xs:element name="TexCoords" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>Texture coordinates for the CENTER of the image within the texture atlas (ignored if slice is set)</xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="required"/>
                            <xs:attribute name="y" type="xs:integer" use="required"/>
                        </xs:complexType>
                    </xs:element>
                </xs:sequence>
                <xs:attribute name="texture" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>Name of the Texture definition to display.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="slice" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>Name of a Slice within the Texture definition. Overrides texture/TexCoords.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="numsegments" type="xs:integer" use="optional" default="16">
                    <xs:annotation>
                        <xs:documentation>Number of segments for circumference (3+). Default: 16.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="startangle" type="xs:decimal" use="optional" default="0">
                    <xs:annotation>
                        <xs:documentation>Starting angle in degrees (0-360, 0=top). Default: 0.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="fillangle" type="xs:decimal" use="optional" default="360">
                    <xs:annotation>
                        <xs:documentation>Fill angle in degrees (0-360). Default: 360.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="mirrorTexCoords" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>Mirror texture horizontally (true/false). Default: false.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="textureScale" type="xs:decimal" use="optional" default="1.0">
                    <xs:annotation>
                        <xs:documentation>Scale of texture artwork (1.0 = 100%). Default: 1.0.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="filtering" type="xs:boolean" use="optional" default="true">
                    <xs:annotation>
                        <xs:documentation>Use bilinear filtering (true) or nearest neighbor (false). Default: true.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="RenderedImageType">
        <xs:complexContent>
            <xs:extension base="WindowType">
                <xs:sequence>
                    <xs:element name="BackgroundColor" type="ColorType"/>
                    <xs:element name="TextureResolution" type="AbsPointType"/>
                </xs:sequence>
                <xs:attribute name="updatemode" type="xs:string" use="optional" default=""/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="ScrollWindowType">
        <xs:annotation>
            <xs:documentation>The ScrollWindow is a container window that provides a vertical scrolling panel for all of its child windows. It resizes as necessary to fit the length of child windows and shows a scrollbar when content extends beyond the window size.</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="BaseWindowType">
                <xs:sequence>
                    <!-- Override EventHandlers to use extended type -->
                    <xs:element name="EventHandlers" type="ScrollWindowEventHandlersType" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="name" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Required. Unique name for the ScrollWindow.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="childscrollwindow" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Name of the child Window that contains all items you wish to scroll through. The scroll child should be anchored at the appropriate spot on the window. It will be adjusted up and down automatically to facilitate scrolling.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="scrollbar" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Name of the child VerticalScrollBar that is anchored at the appropriate location on the window.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="lineheight" type="xs:integer" use="required">
                    <xs:annotation>
                        <xs:documentation>The line height to be used with the scrollbar. Default value is 0.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="autoHideScrollBar" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>Auto-hides the scroll bar when the content scroll child is less than one page in height. Default is false.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="inherits">
                    <xs:annotation>
                        <xs:documentation>Optional. Name of another ScrollWindow definition to inherit from.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string"/>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Add ScrollWindow specific events type -->
    <xs:simpleType name="ScrollWindowEvents">
        <xs:restriction base="xs:string">
            <!-- No specific events defined in ScrollWindow.xsd but adding the type for consistency -->
        </xs:restriction>
    </xs:simpleType>

    <!-- Combined events type for ScrollWindow -->
    <xs:simpleType name="ScrollWindowCombinedEvents">
        <xs:union memberTypes="Events ScrollWindowEvents"/>
    </xs:simpleType>

    <!-- Extended EventHandlerType for ScrollWindow -->
    <xs:complexType name="ScrollWindowEventHandlerType">
        <xs:attribute name="event" type="ScrollWindowCombinedEvents" use="required"/>
        <xs:attribute name="function" type="xs:string" use="required"/>
    </xs:complexType>

    <!-- Extended EventHandlersType for ScrollWindow -->
    <xs:complexType name="ScrollWindowEventHandlersType">
        <xs:sequence>
            <xs:element name="EventHandler" type="ScrollWindowEventHandlerType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Update ScrollWindow element definition -->
    <xs:element name="ScrollWindow" substitutionGroup="Window">
        <xs:annotation>
            <xs:documentation>The ScrollWindow is a container window that provides a vertical scrolling panel for all of its child windows. It resizes as necessary to fit the length of child windows and shows a scrollbar when content extends beyond the window size.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="ScrollWindowType"/>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:complexType name="HorizontalScrollWindowType">
        <xs:annotation>
            <xs:documentation>
                The HorizontalScrollWindow is a container window that provides a horizontal scrolling panel for all of its child windows.

                To use a HorizontalScrollWindow, you add children as normal to its childscrollwindow. This child window will resize as
                necessary to fit the length of your child windows when you call HorizontalScrollWindowUpdateScrollRect().
                If the contents of the window extend beyond the size of the scroll window, the scrollbar will be shown
                and automatically update to reflect the length of your child windows.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="BaseWindowType">
                <xs:sequence>
                    <!-- Override EventHandlers to use extended type if needed -->
                    <xs:element name="EventHandlers" type="WindowEventHandlersType" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="name" type="xs:string" use="required"/>
                <xs:attribute name="childscrollwindow" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>
                            Name of the child Window that contains all items you wish to scroll through.
                            The scroll child should be anchored at the appropriate spot on the window.
                            It will be adjusted left and right automatically to facilitate scrolling.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="scrollbar" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>
                            Name of the child HorizontalScrollBar that is anchored at the appropriate location on the window.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="lineheight" type="xs:integer" use="required">
                    <xs:annotation>
                        <xs:documentation>
                            The line height to be used with the scrollbar.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="autoHideScrollBar" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>
                            Auto-hides the scroll bar when the window the contents scroll child is less than one page.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="inherits">
                    <xs:annotation>
                        <xs:documentation>Optional. Name of another HorizontalScrollWindow definition to inherit from.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string"/>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="PageWindowType">
        <xs:annotation>
            <xs:documentation>The PageWindow provides an automated display for creating a book-like layout. It automatically separates a long vertical organization of windows into page-sized sections.</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="WindowType">
                <xs:sequence>
                    <!-- Override EventHandlers to use extended type -->
                    <xs:element name="EventHandlers" type="PageWindowEventHandlersType" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="name" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Required. Unique name for the PageWindow.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="pagesdisplayed" type="xs:integer" use="required" default="2">
                    <xs:annotation>
                        <xs:documentation>The number of pages to display at once. Expects a number value, 1 to n. Default value is 2.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="guttersize" type="xs:integer" use="required" default="0">
                    <xs:annotation>
                        <xs:documentation>The gutter distance between each page. This affects the width calculation for pages. Default value is 0.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="childcontentswindow" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Name of the child Window that contains all of the windows to be parsed into pages. Must be the name of a valid child Window.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="pagenumbertemplate" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>Name of a valid Label definition to use for the page numbers. Must be the name of a valid Label.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="inherits">
                    <xs:annotation>
                        <xs:documentation>Optional. Name of another PageWindow definition to inherit from.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string"/>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Add PageWindow specific events type -->
    <xs:simpleType name="PageWindowEvents">
        <xs:restriction base="xs:string">
            <!-- No specific events defined in PageWindow.xsd but adding the type for consistency -->
        </xs:restriction>
    </xs:simpleType>

    <!-- Combined events type for PageWindow -->
    <xs:simpleType name="PageWindowCombinedEvents">
        <xs:union memberTypes="Events PageWindowEvents"/>
    </xs:simpleType>

    <!-- Extended EventHandlerType for PageWindow -->
    <xs:complexType name="PageWindowEventHandlerType">
        <xs:attribute name="event" type="PageWindowCombinedEvents" use="required"/>
        <xs:attribute name="function" type="xs:string" use="required"/>
    </xs:complexType>

    <!-- Extended EventHandlersType for PageWindow -->
    <xs:complexType name="PageWindowEventHandlersType">
        <xs:sequence>
            <xs:element name="EventHandler" type="PageWindowEventHandlerType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ComboBoxType">
        <xs:annotation>
            <xs:documentation>The ComboBox provides a window-style combo box control. This Window element is an automated combination of several other window components, including a drop-down button, menu items, and menu background.</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="BaseWindowType">
                <xs:sequence>
                    <xs:element name="MenuButtonOffset" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>The offset of the menu buttons within their background. The menu button size will dictate the size of the background. The offset*2 will be added to the menu background dimensions. Default: 0,0</xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="required">
                                <xs:annotation>
                                    <xs:documentation>The x-pixel offset from the top left corner of the menu background.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="y" type="xs:integer" use="required">
                                <xs:annotation>
                                    <xs:documentation>The y-pixel offset from the top left corner of the menu background.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="EventHandlers" type="ComboBoxEventHandlersType" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="selectedbutton" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>The name of a Button definition for the main drop-down button. This button def should have a text component to display the selected menu item and should have the drop down arrow built into it.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="menuitembutton" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>The name of a Button definition to use for each menu item in the drop down list. This button def must have a text component.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="menubackground" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>The name of a Window definition to use for the drop-down menu. The background will be sized automatically to fit the number of elements added to the menu. This window can contain child windows, but should have anchors set up to resize correctly.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="scrollbar" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>The name of a VerticalScrollbar definition to be used when the combo box contains more items than can be displayed on the screen at once.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="maxvisibleitems" type="xs:integer" use="optional" default="0">
                    <xs:annotation>
                        <xs:documentation>The maximum number of items that can be displayed on the screen at once. If the combo box contains more than these items, the scroll bar will be shown. If no value is specified (0), the ComboBox will automatically calculate a max based on how many menu buttons would fit on half of the screen height.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <!-- Preserve font attribute from Interface.xsd -->
                <xs:attribute name="font" type="xs:string" use="optional"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="SliderBarType">
        <xs:annotation>
            <xs:documentation>The SliderBar provides a Windows-style slider bar control. This is a combination window element that automates slider-box behavior from a set of more basic window components.</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="WindowType">
                <xs:sequence minOccurs="0">
                    <xs:element name="ForegroundOffset" type="AbsPointType" minOccurs="0"/>
                    <!-- Override EventHandlers to use extended type -->
                    <xs:element name="EventHandlers" type="SliderBarEventHandlersType" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="background" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>The name of a HorizontalResizeImage definition for the bar background image. This is sized to fit the width of the window.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="tickmark" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>The name of a DynamicImage definition that contains the texture coordinates and size for a single tick mark. This will be tiled appropriately according to the numticks attribute.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="sliderbutton" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>The name of a Button definition for the slider button.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="numticks" type="xs:integer" use="required" default="3">
                    <xs:annotation>
                        <xs:documentation>The number of tickmarks to display along the bar. Expects a number value from 0 to n. Default value is 3.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="orientation" use="optional" default="horizontal">
                    <xs:annotation>
                        <xs:documentation>Changes the internal functions to behave as if the slider bar was oriented horizontally or vertically. SliderBars using an inappropriate orientation may render strangely but should function the same. Default value is "horizontal".</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="horizontal"/>
                            <xs:enumeration value="vertical"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
                <xs:attribute name="locktoticks" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>Causes the slider bar to only move to values the ticks are located at. Default value is false.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="inherits">
                    <xs:annotation>
                        <xs:documentation>Optional. Name of another SliderBar definition to inherit from.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string"/>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Add SliderBar specific events type -->
    <xs:simpleType name="SliderBarEvents">
        <xs:restriction base="xs:string">
            <xs:enumeration value="OnSlide">
                <xs:annotation>
                    <xs:documentation>Called when the slider position changes.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <!-- Combined events type for SliderBar -->
    <xs:simpleType name="SliderBarCombinedEvents">
        <xs:union memberTypes="Events SliderBarEvents"/>
    </xs:simpleType>

    <!-- Extended EventHandlerType for SliderBar -->
    <xs:complexType name="SliderBarEventHandlerType">
        <xs:attribute name="event" type="SliderBarCombinedEvents" use="required"/>
        <xs:attribute name="function" type="xs:string" use="required"/>
    </xs:complexType>

    <!-- Extended EventHandlersType for SliderBar -->
    <xs:complexType name="SliderBarEventHandlersType">
        <xs:sequence>
            <xs:element name="EventHandler" type="SliderBarEventHandlerType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="StatusBarType">
        <xs:annotation>
            <xs:documentation><![CDATA[The StatusBar provides a Windows-style status bar control. This is a combined window element that provides a percentage bar based on min/max values.
            The StatusBar is a combined window element that provides a percentage bar based on min/max values.

            Components
            The StatusBar is a combined window element that provides a percentage bar based on min/max values. is comprised of the following components:

            - A HorizontalResizeImage definition for the background 'unfilled' portion of the bar.
            - A HorizontalResizeImage definition for the foreground 'filled' portion of the bar.

            Values
            You use a StatusBar by calling StatusBarSetMaximumValue() to set the 'full' value for the bar.  You can then set StatusBarSetCurrentValue() to set the amount displayed.
            By default, StatusBars will immediately apply value changes.  By setting the "interpolate" property to "true," you can change them to instead interpolate to changes over time.
            To immediately apply a change to an interpolating StatusBar, call StatusBarStopInterpolating().]]></xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="WindowType">
                <xs:sequence minOccurs="0">
                    <xs:element name="ForegroundOffset" type="AbsPointType" minOccurs="0"/>
                    <!-- Override EventHandlers to use extended type -->
                    <xs:element name="EventHandlers" type="StatusBarEventHandlersType" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="foreground" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>The name of a HorizontalResizeImage definition for the foreground 'filled' image portion of the bar.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="background" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>The name of a HorizontalResizeImage definition for the background 'unfilled' image portion of the bar.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="reverseFill" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>When set to true, the bar will fill from right to left, rather than left to right. Default value is false.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="interpolate" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>When set to true, the bar will interpolate between value changes, creating a smooth transition effect. Default value is false.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="interpolaterate" type="xs:decimal" use="optional" default="150">
                    <xs:annotation>
                        <xs:documentation>The rate of interpolation if "interpolate" is set to true. This is a percentage of the bar that should fill over the course of one second. Examples: 50 = Fill entire bar in 2 seconds; 100 = Fill entire bar in 1 second; 200 = Fill entire bar in 0.5 seconds. Default value is 150.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="inherits">
                    <xs:annotation>
                        <xs:documentation>Optional. Name of another StatusBar definition to inherit from.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string"/>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Add StatusBar specific events type -->
    <xs:simpleType name="StatusBarEvents">
        <xs:restriction base="xs:string">
            <!-- No specific events defined in StatusBar.xsd but adding the type for consistency -->
        </xs:restriction>
    </xs:simpleType>

    <!-- Combined events type for StatusBar -->
    <xs:simpleType name="StatusBarCombinedEvents">
        <xs:union memberTypes="Events StatusBarEvents"/>
    </xs:simpleType>

    <!-- Extended EventHandlerType for StatusBar -->
    <xs:complexType name="StatusBarEventHandlerType">
        <xs:attribute name="event" type="StatusBarCombinedEvents" use="required"/>
        <xs:attribute name="function" type="xs:string" use="required"/>
    </xs:complexType>

    <!-- Extended EventHandlersType for StatusBar -->
    <xs:complexType name="StatusBarEventHandlersType">
        <xs:sequence>
            <xs:element name="EventHandler" type="StatusBarEventHandlerType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="FullResizeImageType">
        <xs:annotation>
            <xs:documentation>
                The FullResizeImage allows you to create automatically tiling images to produce backgrounds and frames.
                Provided with a set of border and tile-able coordinates, this window element will automatically tile
                a texture to create a window of any size.

                The FullResizeImage requires a set of texture coordinates to specify the different portions of the image.
                These are defined by the Sizes and TexCoords elements.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="WindowType">
                <xs:sequence>
                    <xs:element name="Sizes">
                        <xs:annotation>
                            <xs:documentation><![CDATA[
                                The dimensions in the texture for each tillable component of the image.

                                Syntax:
                                <Sizes>
                                  <TopLeft x="15" y="15" />
                                  <BottomRight x="15" y="15" />
                                  <Middle x="68" y="36" />
                                </Sizes>

                                Default values for all size attributes: 0 ]]>
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="TopLeft">
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required">
                                            <xs:annotation>
                                                <xs:documentation>The pixel width for the top left corner of the image. This is not resized.</xs:documentation>
                                            </xs:annotation>
                                        </xs:attribute>
                                        <xs:attribute name="y" type="xs:integer" use="required">
                                            <xs:annotation>
                                                <xs:documentation>The pixel height for the top left corner of the image. This is not resized.</xs:documentation>
                                            </xs:annotation>
                                        </xs:attribute>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="BottomRight">
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required">
                                            <xs:annotation>
                                                <xs:documentation>The pixel width for the bottom right corner of the image. This is not resized.</xs:documentation>
                                            </xs:annotation>
                                        </xs:attribute>
                                        <xs:attribute name="y" type="xs:integer" use="required">
                                            <xs:annotation>
                                                <xs:documentation>The pixel height for the bottom right corner of the image. This is not resized.</xs:documentation>
                                            </xs:annotation>
                                        </xs:attribute>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="Middle">
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required">
                                            <xs:annotation>
                                                <xs:documentation>The pixel width of the tilable middle portion of the image.</xs:documentation>
                                            </xs:annotation>
                                        </xs:attribute>
                                        <xs:attribute name="y" type="xs:integer" use="required">
                                            <xs:annotation>
                                                <xs:documentation>The pixel height of the tilable middle portion of the image.</xs:documentation>
                                            </xs:annotation>
                                        </xs:attribute>
                                    </xs:complexType>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="TexCoords">
                        <xs:annotation>
                            <xs:documentation>
                                The texture coordinates for each component of the tile-able image.
                                The middle coordinates are REQUIRED. The top/bottom are optional if you do not wish to include a border on your image.

                                Default values for all coordinates: x = 0, y = 0
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="TopLeft">
                                    <xs:annotation>
                                        <xs:documentation>The top left corner of the image (not tiled).</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="TopCenter">
                                    <xs:annotation>
                                        <xs:documentation>The coordinate used for the tile-able portion of the top edge.</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="TopRight">
                                    <xs:annotation>
                                        <xs:documentation>The top right corner of the image (not tiled).</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="MiddleLeft" use="required">
                                    <xs:annotation>
                                        <xs:documentation>The coordinate used for the tile-able portion of the left edge.</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="MiddleCenter" use="required">
                                    <xs:annotation>
                                        <xs:documentation>The coordinate used for the tile-able center of the image.</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="MiddleRight" use="required">
                                    <xs:annotation>
                                        <xs:documentation>The coordinate used for the tile-able portion of the right edge.</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="BottomLeft">
                                    <xs:annotation>
                                        <xs:documentation>The bottom left corner of the image (not tiled).</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="BottomCenter">
                                    <xs:annotation>
                                        <xs:documentation>The coordinate used for the tile-able portion of the bottom edge.</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="BottomRight">
                                    <xs:annotation>
                                        <xs:documentation>The bottom right corner of the image (not tiled).</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="TexSlices">
                        <xs:annotation>
                            <xs:documentation>
                                The texture coordinates for each component of the tile-able image, specified as slice IDs.
                                The middle coordinates are REQUIRED. The top/bottom are optional if you do not wish to include a border on your image.

                                Default values for all slices: x = 0, y = 0, width = 0, height = 0
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="TopLeft">
                                    <xs:annotation>
                                        <xs:documentation>The top left corner of the image (not tiled).</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="width" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="height" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="TopCenter">
                                    <xs:annotation>
                                        <xs:documentation>The coordinate used for the tile-able portion of the top edge.</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="width" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="height" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="TopRight">
                                    <xs:annotation>
                                        <xs:documentation>The top right corner of the image (not tiled).</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="width" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="height" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="MiddleLeft" use="required">
                                    <xs:annotation>
                                        <xs:documentation>The coordinate used for the tile-able portion of the left edge.</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="width" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="height" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="MiddleCenter">
                                    <xs:annotation>
                                        <xs:documentation>The coordinate used for the tile-able center of the image (or not, if frameonly).</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="width" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="height" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="MiddleRight">
                                    <xs:annotation>
                                        <xs:documentation>The coordinate used for the tile-able portion of the right edge.</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="width" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="height" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="BottomLeft">
                                    <xs:annotation>
                                        <xs:documentation>The bottom left corner of the image (not tiled).</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="width" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="height" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="BottomCenter">
                                    <xs:annotation>
                                        <xs:documentation>The coordinate used for the tile-able portion of the bottom edge.</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="width" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="height" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="BottomRight">
                                    <xs:annotation>
                                        <xs:documentation>The bottom right corner of the image (not tiled).</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="width" type="xs:integer" use="required" default="0"/>
                                        <xs:attribute name="height" type="xs:integer" use="required" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                </xs:sequence>
                <xs:attribute name="texture" type="xs:string" use="required" default="">
                    <xs:annotation>
                        <xs:documentation>Name of the UI Texture to use to create the tiled image. Expects a string value, which is the name of a valid UI Texture. Default: ""</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="frameonly" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>If true, does not render the middle middle section of the image. Default: false</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="inherits" use="optional" default="">
                    <xs:annotation>
                        <xs:documentation>Optional. Name of another FullResizeImage definition to inherit from.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string"/>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="VerticalResizeImageType">
        <xs:annotation>
            <xs:documentation>
                The VerticalResizeImage allows you to create an image that will automatically resize to fit a window of any height.
                It requires a set of texture coordinates to specify the different portions of the image.
                These are defined by the Sizes and TexCoords elements.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="WindowType">
                <xs:sequence>
                    <xs:element name="Sizes" use="required">
                        <xs:annotation>
                            <xs:documentation>
                                The dimensions in the texture for each tillable component of the image.
                                The pixel width is taken from the window's &lt;Size&gt; element. All instances of a VerticalResizeImage should use a width value equivalent to the size of the artwork.
                                If the height changes, the image will not tile or shrink vertically. If you need this, use a FullResizeImage definition instead.
                                The top and bottom values may be 0 if you do not wish to have static ends on your image.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="top" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The pixel height of the top end of the image. This is not resized.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="middle" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The pixel height of the middle tilable portion of the image.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="bottom" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The pixel height of the bottom end of the image. This is not resized.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="TexCoords" minOccurs="0" use="required">
                        <xs:annotation>
                            <xs:documentation>
                                The texture coordinates for each component of the tile-able image.
                                The middle coordinates are REQUIRED. The top/bottom are optional if you do not wish to a top/bottom edge to the image.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="Top" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>The top left corner of the image (not tiled).</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="optional" default="0">
                                            <xs:annotation>
                                                <xs:documentation>The x coordinate in the texture.</xs:documentation>
                                            </xs:annotation>
                                        </xs:attribute>
                                        <xs:attribute name="y" type="xs:integer" use="optional" default="0">
                                            <xs:annotation>
                                                <xs:documentation>The y coordinate in the texture.</xs:documentation>
                                            </xs:annotation>
                                        </xs:attribute>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="Middle">
                                    <xs:annotation>
                                        <xs:documentation>The coordinate used for the tile-able center of the image.</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="optional" default="0">
                                            <xs:annotation>
                                                <xs:documentation>The x coordinate in the texture.</xs:documentation>
                                            </xs:annotation>
                                        </xs:attribute>
                                        <xs:attribute name="y" type="xs:integer" use="optional" default="0">
                                            <xs:annotation>
                                                <xs:documentation>The y coordinate in the texture.</xs:documentation>
                                            </xs:annotation>
                                        </xs:attribute>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="Bottom" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>The bottom left corner of the image (not tiled).</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="optional" default="0">
                                            <xs:annotation>
                                                <xs:documentation>The x coordinate in the texture.</xs:documentation>
                                            </xs:annotation>
                                        </xs:attribute>
                                        <xs:attribute name="y" type="xs:integer" use="optional" default="0">
                                            <xs:annotation>
                                                <xs:documentation>The y coordinate in the texture.</xs:documentation>
                                            </xs:annotation>
                                        </xs:attribute>
                                    </xs:complexType>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="TexSlices" minOccurs="0" use="required">
                        <xs:annotation>
                            <xs:documentation>The texture slice references for each component of the tile-able image.</xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="Top" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>The top left corner of the image (not tiled).</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="id" type="xs:string" use="optional" default="">
                                            <xs:annotation>
                                                <xs:documentation>Identifier for the top slice.</xs:documentation>
                                            </xs:annotation>
                                        </xs:attribute>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="Middle">
                                    <xs:annotation>
                                        <xs:documentation>The coordinates used for the tile-able center of the image.</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="id" type="xs:string" use="optional" default="">
                                            <xs:annotation>
                                                <xs:documentation>Identifier for the middle slice.</xs:documentation>
                                            </xs:annotation>
                                        </xs:attribute>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="Bottom" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>The top left corner of the image (not tiled).</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="id" type="xs:string" use="optional" default="">
                                            <xs:annotation>
                                                <xs:documentation>Identifier for the bottom slice.</xs:documentation>
                                            </xs:annotation>
                                        </xs:attribute>
                                    </xs:complexType>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                </xs:sequence>
                <xs:attribute name="name" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Name of the VerticalResizeImage. Must be unique.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="texture" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Name of the UI Texture to use to create the tiled image. Must be a valid UI Texture name.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="textureScale" type="xs:decimal" use="optional" default="1.0">
                    <xs:annotation>
                        <xs:documentation>The scale of the texture to be used for the image artwork. This is multiplied by the image's &lt;Size&gt; to determine the texture dimensions. Default is 1.0 (100%).</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="reverseFill" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>When set to true, the image will tile from bottom to top, rather than top to bottom.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="inherits">
                    <xs:annotation>
                        <xs:documentation>Optional. Name of another VerticalResizeImage definition to inherit from.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string"/>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="HorizontalResizeImageType">
        <xs:annotation>
            <xs:documentation>
                The HorizontalResizeImage allows you to create an image that will automatically resize to fit a window of any width.
                It creates tiles by dividing the image into three parts (left, middle, right) where the middle portion can be repeated/stretched.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="WindowType">
                <xs:sequence>
                    <xs:element name="Sizes">
                        <xs:annotation>
                            <xs:documentation>
                                The dimensions in the texture for each tillable component of the image.
                                The pixel height is taken from the window's Size element. All instances of a HorizontalResizeImage
                                should use a height value equivalent to the size of the artwork. If the height changes,
                                the image will not tile or shrink vertically.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="left" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The pixel width of the left end of the image. This is not resized. Can be 0 if you don't wish to have static ends.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="middle" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The pixel width of the middle tilable portion of the image.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="right" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The pixel width of the right end of the image. This is not resized. Can be 0 if you don't wish to have static ends.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="TexCoords" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                The texture coordinates for each component of the tile-able image.
                                The middle coordinates are REQUIRED. The left/right are optional if you do not wish to include a border on your image.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="Left" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>The top left corner of the image (not tiled).</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="optional" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="optional" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="Middle">
                                    <xs:annotation>
                                        <xs:documentation>The coordinate used for the tile-able center of the image.</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="optional" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="optional" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="Right" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>The top right corner of the image (not tiled).</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="x" type="xs:integer" use="optional" default="0"/>
                                        <xs:attribute name="y" type="xs:integer" use="optional" default="0"/>
                                    </xs:complexType>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="TexSlices" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                The texture slice references for each component of the tile-able image.
                                One of a middle slice or middle texture coordinate is REQUIRED. The left/right are optional
                                if you do not wish to include a border on your image.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="Left" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>The top left corner of the image (not tiled).</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="id" type="xs:string" use="optional" default=""/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="Middle">
                                    <xs:annotation>
                                        <xs:documentation>The coordinate used for the tile-able center of the image.</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="id" type="xs:string" use="optional" default=""/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="Right" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>The top right corner of the image (not tiled).</xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="id" type="xs:string" use="optional" default=""/>
                                    </xs:complexType>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                </xs:sequence>
                <xs:attribute name="name" type="xs:string" use="required"/>
                <xs:attribute name="texture" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Name of the UI Texture to use to create the tiled image.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="textureScale" type="xs:decimal" use="optional" default="1.0">
                    <xs:annotation>
                        <xs:documentation>
                            The scale of the texture to be used for the image artwork. This is multiplied by the image's &lt;Size&gt;
                            to determine the texture dimensions.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="reverseFill" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>When set to true, the image will tile from right to left, rather than left to right.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="inherits">
                    <xs:annotation>
                        <xs:documentation>Optional. Name of another HorizontalResizeImage definition to inherit from.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string"/>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="NifDisplayType">
        <xs:complexContent>
            <xs:extension base="WindowType">
                <xs:sequence>
                    <xs:element name="TexCoords" type="AbsPointType" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="scale" type="xs:float" use="optional" default="1"/>
                <xs:attribute name="nif" type="xs:string" use="optional"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="InterfaceType">
        <xs:annotation>
            <xs:documentation>
                This is the top level xml-tag for each interface xml file.
                All other elements must be contained within the Interface tag.
                All other elements must be contained within the Interface tag.
                There must be exactly one Interface element as the root of any document.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="Include" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        This element allows you to include additional files.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:attribute name="file" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>The relative file path of the xml file from the location of the main xml file.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
            <xs:element name="Scripts" type="ScriptsType" minOccurs="0"/>
            <xs:element name="Assets" type="AssetsType" minOccurs="0"/>
            <xs:element name="Windows" type="WindowsType" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:element name="Font" type="FontType"/>
    <xs:element name="TextureFont" type="AssetType"/>
    <xs:element name="Size" type="SizeType"/>
    <xs:element name="Color" type="ColorType"/>
    <xs:element name="Script" type="ScriptType"/>
    <xs:element name="Anchor" type="AnchorType"/>
    <xs:element name="EventHandler" type="EventHandlerType"/>
    <xs:element name="Texture" type="AssetType"/>
    <xs:element name="Nif" type="AssetType"/>
    <xs:element name="Window" type="BaseWindowType"/>
    <xs:element name="Label" type="LabelType" substitutionGroup="Window"/>
    <xs:element name="FixedFontLabel" type="FixedFontLabelType" substitutionGroup="Window"/>
    <xs:element name="VerticalScrollbar" type="VerticalScrollbarType" substitutionGroup="Window"/>
    <xs:element name="HorizontalScrollbar" type="HorizontalScrollbarType" substitutionGroup="Window"/>
    <xs:element name="AnimFrame" type="AnimFrameType"/>
    <xs:element name="AnimFrames" type="AnimFramesType"/>
    <xs:element name="AnimatedImage" type="AnimatedImageType" substitutionGroup="Window"/>
    <xs:element name="DynamicImage" type="DynamicImageType" substitutionGroup="Window"/>
    <xs:element name="NifDisplay" type="NifDisplayType" substitutionGroup="Window"/>
    <xs:element name="MapDisplay" type="MapDisplayType" substitutionGroup="Window"/>
    <xs:element name="CircleImage" type="CircleImageType" substitutionGroup="Window"/>
    <xs:element name="RenderedImage" type="RenderedImageType" substitutionGroup="Window"/>
    <xs:element name="Button" type="ButtonType" substitutionGroup="Window"/>
    <xs:element name="ScrollWindow" type="ScrollWindowType" substitutionGroup="Window"/>
    <xs:element name="HorizontalScrollWindow" type="HorizontalScrollWindowType" substitutionGroup="Window"/>
    <xs:element name="PageWindow" type="PageWindowType" substitutionGroup="Window"/>
    <xs:element name="ComboBox" type="ComboBoxType" substitutionGroup="Window"/>
    <xs:element name="StatusBar" type="StatusBarType" substitutionGroup="Window"/>
    <xs:element name="SliderBar" type="SliderBarType" substitutionGroup="Window"/>
    <xs:element name="EditBox" type="EditBoxType" substitutionGroup="Window"/>
    <xs:element name="LogDisplay" type="LogDisplayType" substitutionGroup="Window"/>
    <xs:element name="FullResizeImage" type="FullResizeImageType" substitutionGroup="Window"/>
    <xs:element name="VerticalResizeImage" type="VerticalResizeImageType" substitutionGroup="Window"/>
    <xs:element name="HorizontalResizeImage" type="HorizontalResizeImageType" substitutionGroup="Window"/>
    <xs:element name="ListColumn" type="ListColumnType"/>
    <xs:element name="ListColumns" type="ListColumnsType"/>
    <xs:element name="ListData" type="ListDataType"/>
    <xs:element name="List" type="ListType" substitutionGroup="Window"/>
    <xs:element name="Anchors" type="AnchorsType"/>
    <xs:element name="Scripts" type="ScriptsType"/>
    <xs:element name="Assets" type="AssetsType"/>
    <xs:element name="EventHandlers" type="EventHandlersType"/>
    <xs:element name="Sound" type="SoundType"/>
    <xs:element name="Sounds" type="SoundsType"/>
    <xs:element name="Windows" type="WindowsType"/>
    <xs:element name="Interface" type="InterfaceType">
        <xs:annotation>
            <xs:documentation>
                This is the top level xml-tag for each interface xml file.
                All other elements must be contained within the Interface tag.
                All other elements must be contained within the Interface tag.
                There must be exactly one Interface element as the root of any document.
            </xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="Include" type="IncludeType"/>
    <xs:element name="AbsPoint" type="AbsPointType"/>
    <xs:element name="RelPoint" type="RelPointType"/>
    <xs:element name="TexturePoint" type="TexturePointType"/>
    <xs:element name="WindowDef" type="WindowDefType"/>
    <xs:element name="Icon" type="IconType"/>
    <xs:element name="MapIcon" type="MapIconType"/>
    <xs:element name="MaskWindow">
        <xs:annotation>
            <xs:documentation>
                <![CDATA[The MaskWindow is a container window that allows you to create a rectangular mask for child windows. If the contents of the window extend beyond the size of the mask window, the parts outside of the window will be invisible.]]>
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="WindowType">
                    <xs:attribute name="name" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>Required. Unique identifier for this MaskWindow.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="inherits">
                        <xs:annotation>
                            <xs:documentation>Optional. Name of another MaskWindow definition to inherit from.</xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:string"/>
                        </xs:simpleType>
                    </xs:attribute>
                    <!-- Preserve existing attributes from Interface.xsd -->
                    <xs:attribute name="movable" type="xs:boolean" use="optional"/>
                    <xs:attribute name="popable" type="xs:boolean" use="optional"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="DockableWindow">
        <xs:annotation>
            <xs:documentation>The DockableWindow provides basic window functionality and allows multiple DockableWindows to be joined together in one or more groups. Windows can be docked and undocked, with tabs for navigation between docked windows.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BaseWindowType">
                    <xs:sequence>
                        <!-- Override EventHandlers to use extended type -->
                        <xs:element name="EventHandlers" type="DockableWindowEventHandlersType" minOccurs="0"/>
                    </xs:sequence>
                    <xs:attribute name="name" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>Unique name for the DockableWindow element.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="szTabDef" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>The name of a Button definition to use as the tab for the dockable window. This button definition must have a text component to display the tab label.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="inherits">
                        <xs:annotation>
                            <xs:documentation>Optional. Name of another DockableWindow definition to inherit from.</xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:string"/>
                        </xs:simpleType>
                    </xs:attribute>
                    <!-- Preserve existing attributes from Interface.xsd -->
                    <xs:attribute name="movable" type="xs:boolean" use="optional"/>
                    <xs:attribute name="sticky" type="xs:boolean" use="optional"/>
                    <xs:attribute name="savesettings" type="xs:boolean" use="optional"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="ColorPicker">
        <xs:annotation>
            <xs:documentation>The ColorPicker is a specialized UI element that allows you to add a number of colors to a single UI element. It can display multiple colors in a grid arrangement.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="BaseWindowType">
                    <xs:sequence>
                        <xs:element name="ColorTexCoords" minOccurs="0">
                            <xs:annotation>
                                <xs:documentation>The texture coordinates for the top left of the image on the texture. Specifies where on the texture the color swatches begin. Default: 0,0</xs:documentation>
                            </xs:annotation>
                            <xs:complexType>
                                <xs:attribute name="x" type="xs:integer" use="required">
                                    <xs:annotation>
                                        <xs:documentation>The x pixel coordinate of the top left of the image.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="y" type="xs:integer" use="required">
                                    <xs:annotation>
                                        <xs:documentation>The y pixel coordinate of the top left of the image.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="ColorTexDims" minOccurs="0">
                            <xs:annotation>
                                <xs:documentation>The texture dimensions of the image to use for colors. If no ColorTexDims are specified and a texture is specified, it will use default dimensions. Default: 0,0</xs:documentation>
                            </xs:annotation>
                            <xs:complexType>
                                <xs:attribute name="x" type="xs:integer" use="required">
                                    <xs:annotation>
                                        <xs:documentation>The x pixel texture size.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="y" type="xs:integer" use="required">
                                    <xs:annotation>
                                        <xs:documentation>The y pixel texture size.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="ColorSize" minOccurs="0">
                            <xs:annotation>
                                <xs:documentation>The width and height of each color swatch. Default: 1,1</xs:documentation>
                            </xs:annotation>
                            <xs:complexType>
                                <xs:attribute name="x" type="xs:integer" use="required">
                                    <xs:annotation>
                                        <xs:documentation>The x pixel color size.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="y" type="xs:integer" use="required">
                                    <xs:annotation>
                                        <xs:documentation>The y pixel color size.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name="ColorSpacing" minOccurs="0">
                            <xs:annotation>
                                <xs:documentation>The amount of space (in pixels) in between each color on the x and y axes. Default: 0,0</xs:documentation>
                            </xs:annotation>
                            <xs:complexType>
                                <xs:attribute name="x" type="xs:integer" use="required">
                                    <xs:annotation>
                                        <xs:documentation>The x amount of space between color swatches.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="y" type="xs:integer" use="required">
                                    <xs:annotation>
                                        <xs:documentation>The y amount of space between color swatches.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                    <xs:attribute name="texture" type="xs:string" use="optional">
                        <xs:annotation>
                            <xs:documentation>Name of the UI Texture to display color swatches. Must be a valid UI texture name.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="columnsPerRow" type="xs:integer" use="optional" default="1">
                        <xs:annotation>
                            <xs:documentation>Allows you to specify how many colors you wish to have in a row. Default: 1.</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <!-- ActionButtonGroup Definition -->
    <xs:complexType name="ActionButtonGroupType">
        <xs:complexContent>
            <xs:extension base="WindowType">
                <xs:sequence>
                    <xs:element name="ActionButtonDefs" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                Defines the template definitions used for each button component
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element name="ButtonDef" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Base Button definition. Size determines individual button size.
                                        </xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="templateName" type="xs:string" use="optional"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="TextDef" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Label definition for button text. Anchored relative to ButtonDef size.
                                        </xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="templateName" type="xs:string" use="optional"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="TimerDef" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>
                                            Label definition for timer text. Anchored relative to ButtonDef size.
                                        </xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="templateName" type="xs:string" use="optional"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="IconDef" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>
                                            DynamicImage definition for the icon. Anchored relative to ButtonDef size.
                                        </xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="templateName" type="xs:string" use="optional"/>
                                    </xs:complexType>
                                </xs:element>
                                <xs:element name="CooldownDef" minOccurs="0">
                                    <xs:annotation>
                                        <xs:documentation>
                                            DynamicImage or AnimatedImage def for cooldown sweep/animation. Anchored relative to ButtonDef size.
                                        </xs:documentation>
                                    </xs:annotation>
                                    <xs:complexType>
                                        <xs:attribute name="templateName" type="xs:string" use="optional"/>
                                    </xs:complexType>
                                </xs:element>
                            </xs:sequence>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="ButtonSpacing" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                Defines the spacing between buttons in the grid
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="optional" default="0"/>
                            <xs:attribute name="y" type="xs:integer" use="optional" default="0"/>
                        </xs:complexType>
                    </xs:element>
                    <!-- Override EventHandlers to use extended type -->
                    <xs:element name="EventHandlers" type="ActionButtonGroupEventHandlersType" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="numrows" type="xs:integer" use="optional" default="0">
                    <xs:annotation>
                        <xs:documentation>Optional. The number of rows of buttons. Default: 0.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="numcols" type="xs:integer" use="optional" default="0">
                    <xs:annotation>
                        <xs:documentation>Optional. The number of columns of buttons. Default: 0.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:element name="ActionButtonGroup" substitutionGroup="Window">
        <xs:annotation>
            <xs:documentation>
                ActionButtonGroup XML Definition. Inherits all attributes and elements from Window.xml
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="ActionButtonGroupType"/>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <!-- CooldownDisplay Definition -->
    <xs:complexType name="CooldownDisplayType">
        <xs:complexContent>
            <xs:extension base="WindowType">
                <xs:attribute name="cooldownshape" use="optional" default="square">
                    <xs:annotation>
                        <xs:documentation>The shape of the cooldown wipe: "circle" or "square". A circular cooldown wipes in a radial pattern, while square wipes in a rectangular pattern. Default: "square".</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="circle"/>
                            <xs:enumeration value="square"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
                <xs:attribute name="segments" type="xs:integer" use="optional" default="8">
                    <xs:annotation>
                        <xs:documentation>Number of segments for circle shape, which determines the smoothness of the circular wipe. Only applies to circular CooldownDisplays. Higher values create a smoother circular animation but may impact performance. Default: 8.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:element name="CooldownDisplay" substitutionGroup="Window">
        <xs:annotation>
            <xs:documentation>The CooldownDisplay provides a rectangular or circular shaped radial cooldown wipe for interface objects needing to display that information. It visualizes a timer by progressively revealing or covering a portion of the display.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="CooldownDisplayType"/>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <!-- Add DockableWindow specific events type -->
    <xs:simpleType name="DockableWindowEvents">
        <xs:restriction base="xs:string">
            <xs:enumeration value="OnDock">
                <xs:annotation>
                    <xs:documentation>Called when a window has been docked. Callback format: function(rootWindowName, childWindowName) where rootWindowName is the name of the root window that the child is being docked to and childWindowName is the name of the child window that is being docked.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="OnUnDock">
                <xs:annotation>
                    <xs:documentation>Called when a window has been undocked. Callback format: function(rootWindowName, childWindowName) where rootWindowName is the name of the root window that the child is being undocked from and childWindowName is the name of the child window that is being undocked.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="OnPositionTabs">
                <xs:annotation>
                    <xs:documentation>Called when a window's tabs have been positioned. Callback format: function(tabHeight) where tabHeight is the height offset taken up by the tabs.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <!-- Combined events type for DockableWindow -->
    <xs:simpleType name="DockableWindowCombinedEvents">
        <xs:union memberTypes="Events DockableWindowEvents"/>
    </xs:simpleType>

    <!-- Extended EventHandlerType for DockableWindow -->
    <xs:complexType name="DockableWindowEventHandlerType">
        <xs:attribute name="event" type="DockableWindowCombinedEvents" use="required"/>
        <xs:attribute name="function" type="xs:string" use="required"/>
    </xs:complexType>

    <!-- Extended EventHandlersType for DockableWindow -->
    <xs:complexType name="DockableWindowEventHandlersType">
        <xs:sequence>
            <xs:element name="EventHandler" type="DockableWindowEventHandlerType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Add EditBox specific events type -->
    <xs:simpleType name="EditBoxEvents">
        <xs:restriction base="xs:string">
            <xs:enumeration value="OnTextChanged">
                <xs:annotation>
                    <xs:documentation>Called when the text inside the edit box changes.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <!-- Combined events type for EditBox -->
    <xs:simpleType name="EditBoxCombinedEvents">
        <xs:union memberTypes="Events EditBoxEvents"/>
    </xs:simpleType>

    <!-- Extended EventHandlerType for EditBox -->
    <xs:complexType name="EditBoxEventHandlerType">
        <xs:attribute name="event" type="EditBoxCombinedEvents" use="required"/>
        <xs:attribute name="function" type="xs:string" use="required"/>
    </xs:complexType>

    <!-- Extended EventHandlersType for EditBox -->
    <xs:complexType name="EditBoxEventHandlersType">
        <xs:sequence>
            <xs:element name="EventHandler" type="EditBoxEventHandlerType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Update EditBoxType with complete documentation and attributes -->
    <xs:complexType name="EditBoxType">
        <xs:annotation>
            <xs:documentation>
                The EditBox is the generic text-input window element. While in focus, the edit box will show a blinking
                cursor and trap (and display) all keyboard input. You can set focus to an edit box by manually calling
                WindowSetFocus(), or by clicking on it with the mouse.

                Keyboard Commands:
                - Basic Arrow Keys: Moves cursor left, right, up, and down in the text.
                - Shift Up/Down Arrow: Moves backward/forward through the input history.
                - Shift Left/Right Arrow: Selects character to the left/right of the cursor.
                - Shift-Control Left/Right Arrow: Selects the entire word to the left/right of the cursor.
                - Control Left/Right Arrow: Moves the cursor one word to the left/right.
                - Home Key: Moves the cursor to the beginning of the text.
                - Shift Home Key: Selects all the text between the cursor location and the beginning of the text.
                - End Key: Moves the cursor to the end of the text.
                - Shift End Key: Selects all the text between the cursor location and the end of the text.
                - Delete Key: Deletes the selected text, or the text immediately after the cursor.
                - Backspace Key: Deletes the selected text, or the text immediately before the cursor.
                - Control Backspace Key: Deletes the entire word before the cursor.
                - Enter Key: Adds the current text to the input history (if a history size is specified).
                - Control-A: Selects all of the text.
                - Control-C: Copies the selected text to the Window's Clipboard.
                - Control-V: Pastes text currently on the Window's Clipboard into the EditBox.
                - Control-X: Cuts the selected text to the Window's Clipboard.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="BaseWindowType">
                <xs:sequence>
                    <xs:element name="TextColor" type="ColorType" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>The color for the text. Default: r=255, g=255, b=255</xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="TextOffset" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                The offset for the text within the EditBox dimensions. This allows you to restrict
                                the text to only the center portion. The offset is the distance subtracted from both
                                the top/bottom and left/right edges of the EditBox.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The x-pixel offset from the top left corner.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="y" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The y-pixel offset from the top left corner.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                    <!-- Override EventHandlers to use extended type -->
                    <xs:element name="EventHandlers" type="EditBoxEventHandlersType" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="font" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>The name of the Font definition to use. This attribute is required.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="maxchars" type="xs:integer" use="optional" default="255">
                    <xs:annotation>
                        <xs:documentation>The maximum number of characters allowed to be displayed. Default: 255</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="scrollbar" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>The name of a VerticalScrollBar to use if the text exceeds the height of the window when in vertical scrolling mode. Note: Scrollbars are currently broken for edit boxes.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="background" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>The name of a FullResizeImage to use as a background.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="linespacing" type="xs:integer" use="optional" default="0">
                    <xs:annotation>
                        <xs:documentation>An override value for the font line spacing. If 0, the font height is used.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="password" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>The edit box should work like a password box and display asterisks instead of the actual characters typed.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="scrolling" use="optional" default="horiz">
                    <xs:annotation>
                        <xs:documentation>The scrolling mode to use. "vert": Word-wrap the text. "horiz": Scroll the text horizontally on one line.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="vert"/>
                            <xs:enumeration value="horiz"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
                <xs:attribute name="input" use="optional" default="all">
                    <xs:annotation>
                        <xs:documentation>The type of input this EditBox should accept. "all": Accept all characters. "nospaces": Accepts all characters except for spaces. "text": Accepts only text. "numbers": Accepts only numbers.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="all"/>
                            <xs:enumeration value="nospaces"/>
                            <xs:enumeration value="text"/>
                            <xs:enumeration value="numbers"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
                <xs:attribute name="history" type="xs:integer" use="optional" default="0">
                    <xs:annotation>
                        <xs:documentation>The size of the input history (tracked automatically when the enter key is pressed) to track. 0 means no history.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="MapDisplayType">
        <xs:complexContent>
            <xs:extension base="WindowType">
                <xs:sequence>
                    <xs:element name="TexCoords" type="AbsPointType" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="iconScale" type="xs:float" use="optional" default="1"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Add Label specific events type -->
    <xs:simpleType name="LabelEvents">
        <xs:restriction base="xs:string">
            <xs:enumeration value="OnHyperLinkClicked">
                <xs:annotation>
                    <xs:documentation>Called when a LButtonUP occurs over a hyperlink. Callback format: function(linkParam)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="OnHyperLinkMouseOver">
                <xs:annotation>
                    <xs:documentation>Called when the mouse moves over a hyperlink. Callback format: function(linkParam)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <!-- Combined events type for Label -->
    <xs:simpleType name="LabelCombinedEvents">
        <xs:union memberTypes="Events LabelEvents"/>
    </xs:simpleType>

    <!-- Extended EventHandlerType for Label -->
    <xs:complexType name="LabelEventHandlerType">
        <xs:attribute name="event" type="LabelCombinedEvents" use="required"/>
        <xs:attribute name="function" type="xs:string" use="required"/>
    </xs:complexType>

    <!-- Extended EventHandlersType for Label -->
    <xs:complexType name="LabelEventHandlersType">
        <xs:sequence>
            <xs:element name="EventHandler" type="LabelEventHandlerType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Update LabelType with complete documentation -->
    <xs:complexType name="LabelType">
        <xs:annotation>
            <xs:documentation>
                The Label window element is the primary text-drawing element for the Interface. The text that a label displays must be set with the
                LabelSetText() function from Lua script. This is done because all text in the UI system is maintained as a wide-string type.
                This allows support for foreign language versions with just a single XML/Lua Source.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="BaseWindowType">
                <xs:sequence>
                    <xs:element name="Color" type="ColorType" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                The color for the label's text.

                                Syntax: &lt;Color r="255" g="255" b="255" /&gt;

                                Default values:
                                r = 255
                                g = 255
                                b = 255
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="LinkColor" type="ColorType" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                The color for any links embedded in the text.

                                Syntax: &lt;LinkColor r="0" g="51" b="255" /&gt;

                                Default values:
                                r = 0
                                g = 51
                                b = 255
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="LinkHighlightColor" type="ColorType" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                The mouse over color for any links embedded in the text.

                                Syntax: &lt;LinkHighlightColor r="167" g="51" b="255" /&gt;

                                Default values:
                                r = 167
                                g = 51
                                b = 255
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <!-- Override EventHandlers to use extended type -->
                    <xs:element name="EventHandlers" type="LabelEventHandlersType" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="font" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>
                            The name of the Font definition to use. This attribute is required.

                            Expects: A string value of a valid Font definition.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="maxchars" type="xs:integer" use="optional" default="255">
                    <xs:annotation>
                        <xs:documentation>
                            The maximum number of characters allowed to be displayed.

                            Expects: A number greater than 0.
                            Default: 255
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="text" type="xs:string" use="optional" default="">
                    <xs:annotation>
                        <xs:documentation>The initial text to display in the label.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="textalign" type="Alignments" use="optional" default="left">
                    <xs:annotation>
                        <xs:documentation>
                            The text alignment. Controls how text is positioned within the label.

                            Expects: A string value, which is one of the following:
                            - "left": Aligned to the left.
                            - "top": Centered horizontally.
                            - "center": Centered horizontally (and vertically when autoresize is false).
                            - "right": Aligned to the right.
                            - "leftcenter": Aligned to the left and centered vertically.
                            - "rightcenter": Aligned to the right and centered vertically.
                            - "bottom": Aligned to the bottom and centered horizontally.
                            - "bottomleft": Aligned to the bottom and left.
                            - "bottomright": Aligned to the bottom and right.

                            Default: "left"
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="wordwrap" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>
                            Should the text be word wrapped if the width of the text string is greater than the Label width?

                            Expects: The word "true" or "false"
                            - true: Yes, allow word wrapping if needed.
                            - false: No, cut off the text if it reaches the max width.

                            Default: false
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="autoresize" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>
                            Should the height of the label be automatically resized according to its text?

                            Expects: The word "true" or "false"
                            - true: Yes, size the label to fit its text.
                            - false: No, cut off the text if it reaches the max height.

                            Default: false

                            Notes: Auto-resize is very useful for large blocks of text displayed in a scrolling or
                            paging container, such as a ScrollWindow, HorizontalScrollWindow, or PageWindow.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="autoresizewidth" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>
                            Should the width be shrunk automatically to fit its text?

                            Expects: The word "true" or "false"
                            - true: Yes, reduce the width of the label to fit its text.
                            - false: No, never reduce the width of the label.

                            Default: false

                            Notes: When auto-resizing the width of a label, the label will only size up to its
                            specified dimensions. This attribute only reduces the size when the full width is not needed.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="textAutoFitMinScale" type="xs:decimal" use="optional" default="1.0">
                    <xs:annotation>
                        <xs:documentation>
                            If the text min scale value is set to something other than 1.0, the Label will automatically
                            drop the point size of the font on a non-resizable label until the text fits within the label's
                            dimensions, up to the min font scale.

                            Expects: A number value. (1.0 = 100% and no auto-scaling)
                            Default: 1.0
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="linespacing" type="xs:integer" use="optional" default="0">
                    <xs:annotation>
                        <xs:documentation>
                            An override value for the font line spacing.

                            Expects: A number. If 0, the font height is used.
                            Default: 0
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="warnOnTextCropped" type="xs:boolean" use="optional" default="true">
                    <xs:annotation>
                        <xs:documentation>
                            Should this Label log warning messages if the text is cut off?

                            Expects:
                            - true: Yes, log error messages when the text is cut off.
                            - false: No, do not log error messages when the text is cut off.

                            Default: true
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="ignoreFormattingTags" type="xs:boolean" use="optional" default="false">
                    <xs:annotation>
                        <xs:documentation>
                            Ignore all formatting tags while processing this text. Setting this flag on labels
                            you know will never use formatting tags can improve performance.

                            Expects:
                            - true: Yes, do not process formatting tags.
                            - false: No, handle all formatting tags appropriately.

                            Default: false
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Add MapDisplay specific events type -->
    <xs:simpleType name="MapDisplayEvents">
        <xs:restriction base="xs:string">
            <xs:enumeration value="OnPointMouseOver">
                <xs:annotation>
                    <xs:documentation>Called when the user mouses over a icon map point (or points). See the &lt;WindowName.MouseoverPoints&gt; variable for all of the points currently under the mouse cursor.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <!-- Combined events type for MapDisplay -->
    <xs:simpleType name="MapDisplayCombinedEvents">
        <xs:union memberTypes="Events MapDisplayEvents"/>
    </xs:simpleType>

    <!-- Extended EventHandlerType for MapDisplay -->
    <xs:complexType name="MapDisplayEventHandlerType">
        <xs:attribute name="event" type="MapDisplayCombinedEvents" use="required"/>
        <xs:attribute name="function" type="xs:string" use="required"/>
    </xs:complexType>

    <!-- Extended EventHandlersType for MapDisplay -->
    <xs:complexType name="MapDisplayEventHandlersType">
        <xs:sequence>
            <xs:element name="EventHandler" type="MapDisplayEventHandlerType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Update MapDisplayType with complete documentation -->
    <xs:complexType name="MapDisplayType">
        <xs:annotation>
            <xs:documentation>
                <![CDATA[The MapDisplay is an single view of a game's MapData.

      The MapDisplay is a very general UI element that is not specific to any particular game.  It is only the visual front end for a game's map system.

Under the hood, the Map display creates a 'map' background image, and supports the display various icons.  When the game adds icon, or other data to a MapDisplay, the MapDisplay provides the game a unique display index for each map point.  When you mouse over or click on a map icon, you must pass that id number into your game-specific callback to get your game relevant data.

WARNING
The MapDisplay uses a stencil buffer, so it will not work correctly if placed as a child element of any other stencil-using window element.  These include..

PageWindow
ScrollWindow
HorizontalScrollWindow]]>
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="WindowType">
                <xs:sequence>
                    <xs:element name="TexCoords" type="AbsPointType" minOccurs="0"/>
                    <!-- Override EventHandlers to use extended type -->
                    <xs:element name="EventHandlers" type="MapDisplayEventHandlersType" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="name" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Required. Unique name.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="shape" use="optional">
                    <xs:annotation>
                        <xs:documentation>Optional. Shape of the map display area: "rect" or "circular". Default: "rect"? (Doc default is 1.0 which seems wrong).</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:annotation>
                                <xs:documentation>The shape of the map.</xs:documentation>
                            </xs:annotation>
                            <xs:enumeration value="rect"/>
                            <xs:enumeration value="circular"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
                <xs:attribute name="iconScale" type="xs:decimal" use="optional" default="1.0">
                    <xs:annotation>
                        <xs:documentation>Optional. Scale factor for icons displayed on the map (1.0 = 100%). Default: 1.0.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="loadingAnim" type="xs:string" use="optional">
                    <xs:annotation>
                        <xs:documentation>Optional. Name of an AnimatedImage definition to show while map data is loading. This image will be shown/hidden by the game when map data is being loaded for this display.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="inherits">
                    <xs:annotation>
                        <xs:documentation>Optional. Name of another MapDisplay definition to inherit from.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string"/>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Add VerticalScrollbar specific events type -->
    <xs:simpleType name="VerticalScrollbarEvents">
        <xs:restriction base="xs:string">
            <xs:enumeration value="OnScrollPosChanged">
                <xs:annotation>
                    <xs:documentation>Called when the scroll position has changed. Callback syntax: SomeVerticalScrollBar.OnScrollPosChanged(scrollPos) where scrollPos is the current scroll position.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <!-- Combined events type for VerticalScrollbar -->
    <xs:simpleType name="VerticalScrollbarCombinedEvents">
        <xs:union memberTypes="Events VerticalScrollbarEvents"/>
    </xs:simpleType>

    <!-- Extended EventHandlerType for VerticalScrollbar -->
    <xs:complexType name="VerticalScrollbarEventHandlerType">
        <xs:attribute name="event" type="VerticalScrollbarCombinedEvents" use="required"/>
        <xs:attribute name="function" type="xs:string" use="required"/>
    </xs:complexType>

    <!-- Extended EventHandlersType for VerticalScrollbar -->
    <xs:complexType name="VerticalScrollbarEventHandlersType">
        <xs:sequence>
            <xs:element name="EventHandler" type="VerticalScrollbarEventHandlerType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Update VerticalScrollbarType with complete documentation -->
    <xs:complexType name="VerticalScrollbarType">
        <xs:annotation>
            <xs:documentation>
                The VerticalScrollbar provides a windows-style scroll bar. This Window element is an automated combination of several other window components.
                It is a combination window element that automates a scroll bar functionality. While scroll bars can be used independently,
                they are most often used as a component of other scrolling windows such as the ListBox, ScrollWindow, or TextLogDisplay.

                Components:
                - A Button definition for the up arrow.
                - A Button definition for the down arrow.
                - A VerticalResizeImage for the background of the scrollbar.
                - A VerticalResizeImage for the scroll thumb.

                When a scrollbar is sized, the background image resizes to fit its dimensions. When used as part of another window element,
                the scrollbar's thumb will automatically size and position itself to reflect its parent window's data.

                When using a scrollbar on it's own through lua, you need to set the following values according to your data
                - lineSize	The height of a single line.  (Use VerticalScrollbarSetLineSize() and VerticalScrollbarGetLineSize())
                - pageSize	The height for a full page.  (Use VerticalScrollbarSetPageSize() and VerticalScrollbarGetPageLineSize())
                - maxScroll	The maximum value of your scroll range.  (Use VerticalScrollbarSetMaxScrollPosition() and VerticalScrollbarGetMaxScrollPosition())
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="WindowType">
                <xs:sequence>
                    <xs:element name="UpOffset" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>The offset for the UpButton from the top of the scrollbar window.</xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The x pixel offset from the top left corner of the window.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="y" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The y pixel offset from the top left corner of the window.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="DownOffset" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>The offset for the DownButton from the bottom left of the scrollbar window.</xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The x pixel offset from the bottom left corner of the window.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="y" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The y pixel offset from the bottom left corner of the window.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="ThumbOffset" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>The offset for the Thumb from the topleft of the scrollbar window.</xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The x pixel offset from the top left corner of the window.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="y" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The y pixel offset from the top left corner of the window.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                    <xs:element name="ActiveZoneOffset" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation>
                                The ActiveZone is the area outside of the scrollbar's dimensions that you can still click and drag the scrollbar.
                                Windows seems to have an active zone of about 100 pixels on either side of a scrollbar.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:attribute name="x" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The x pixel distance on either side of the scrollbar.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="y" type="xs:integer" use="optional" default="0">
                                <xs:annotation>
                                    <xs:documentation>The y pixel distance on either side of the scrollbar.</xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:complexType>
                    </xs:element>
                    <!-- Override EventHandlers to use extended type -->
                    <xs:element name="EventHandlers" type="VerticalScrollbarEventHandlersType" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="name" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Name of the VerticalScrollbar. Must be unique.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="up" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Name of the Button definition to use for the up button.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="down" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Name of the Button definition to use for the down button.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="thumb" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Name of the VerticalResizeImage definition to use for the scaling scrollbar thumb.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="gutter" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>Name of the VerticalResizeImage definition to use for the background for the scroll area.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="inherits">
                    <xs:annotation>
                        <xs:documentation>Optional. Name of another VerticalScrollbar definition to inherit from.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                        <xs:restriction base="xs:string"/>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Update VerticalScrollbar element definition -->
    <xs:element name="VerticalScrollbar" substitutionGroup="Window">
        <xs:annotation>
            <xs:documentation>
                The VerticalScrollbar provides a windows-style scroll bar. This Window element is an automated combination of several other window components.
                It is a combination window element that automates a scroll bar functionality. While scroll bars can be used independently,
                they are most often used as a component of other scrolling windows such as the ListBox, ScrollWindow, or TextLogDisplay.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="VerticalScrollbarType"/>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <!-- Add ActionButtonGroup specific events type -->
    <xs:simpleType name="ActionButtonGroupEvents">
        <xs:restriction base="xs:string">
            <xs:enumeration value="OnActionButtonLButtonDown">
                <xs:annotation>
                    <xs:documentation>Callback format: function(buttonIndex)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="OnActionButtonLButtonUp">
                <xs:annotation>
                    <xs:documentation>Callback format: function(buttonIndex)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="OnActionButtonRButtonDown">
                <xs:annotation>
                    <xs:documentation>Callback format: function(buttonIndex)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="OnActionButtonRButtonUp">
                <xs:annotation>
                    <xs:documentation>Callback format: function(buttonIndex)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="OnActionButtonMouseOver">
                <xs:annotation>
                    <xs:documentation>Callback format: function(buttonIndex)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="OnActionButtonMouseOverEnd">
                <xs:annotation>
                    <xs:documentation>Callback format: function(buttonIndex)</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <!-- Combined events type for ActionButtonGroup -->
    <xs:simpleType name="ActionButtonGroupCombinedEvents">
        <xs:union memberTypes="Events ActionButtonGroupEvents"/>
    </xs:simpleType>

    <!-- Extended EventHandlerType for ActionButtonGroup -->
    <xs:complexType name="ActionButtonGroupEventHandlerType">
        <xs:attribute name="event" type="ActionButtonGroupCombinedEvents" use="required"/>
        <xs:attribute name="function" type="xs:string" use="required"/>
    </xs:complexType>

    <!-- Extended EventHandlersType for ActionButtonGroup -->
    <xs:complexType name="ActionButtonGroupEventHandlersType">
        <xs:sequence>
            <xs:element name="EventHandler" type="ActionButtonGroupEventHandlerType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Add Button specific events type -->
    <xs:simpleType name="ButtonEvents">
        <xs:restriction base="xs:string">
            <xs:enumeration value="OnLButtonDown"/>
            <xs:enumeration value="OnLButtonUp"/>
            <xs:enumeration value="OnRButtonDown"/>
            <xs:enumeration value="OnRButtonUp"/>
            <xs:enumeration value="OnMouseOver"/>
            <xs:enumeration value="OnMouseOverEnd"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Combined events type for Button -->
    <xs:simpleType name="ButtonCombinedEvents">
        <xs:union memberTypes="Events ButtonEvents"/>
    </xs:simpleType>

    <!-- Extended EventHandlerType for Button -->
    <xs:complexType name="ButtonEventHandlerType">
        <xs:attribute name="event" type="ButtonCombinedEvents" use="required"/>
        <xs:attribute name="function" type="xs:string" use="required"/>
    </xs:complexType>

    <!-- Extended EventHandlersType for Button -->
    <xs:complexType name="ButtonEventHandlersType">
        <xs:sequence>
            <xs:element name="EventHandler" type="ButtonEventHandlerType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Add ComboBox specific events type -->
    <xs:simpleType name="ComboBoxEvents">
        <xs:restriction base="xs:string">
            <xs:enumeration value="OnSelChanged">
                <xs:annotation>
                    <xs:documentation>Called when the selected item changes.</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <!-- Combined events type for ComboBox -->
    <xs:simpleType name="ComboBoxCombinedEvents">
        <xs:union memberTypes="Events ComboBoxEvents"/>
    </xs:simpleType>

    <!-- Extended EventHandlerType for ComboBox -->
    <xs:complexType name="ComboBoxEventHandlerType">
        <xs:attribute name="event" type="ComboBoxCombinedEvents" use="required"/>
        <xs:attribute name="function" type="xs:string" use="required"/>
    </xs:complexType>

    <!-- Extended EventHandlersType for ComboBox -->
    <xs:complexType name="ComboBoxEventHandlersType">
        <xs:sequence>
            <xs:element name="EventHandler" type="ComboBoxEventHandlerType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Add ListBox specific events type -->


    <!-- Combined events type for ListBox -->

    <!-- Add ModuleFile types and elements -->

    <!-- ModuleFile supporting types -->
    <xs:complexType name="AuthorType">
        <xs:annotation>
            <xs:documentation>
                This element contains information about the module author.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="name" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The name of the author.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="email" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>The email address of the author.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="DescriptionType">
        <xs:annotation>
            <xs:documentation>
                This element contains a text description of the mod.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="text" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The description text.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="DependencyType">
        <xs:attribute name="name" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The name of the module this mod depends on.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="DependenciesType">
        <xs:annotation>
            <xs:documentation>
                This element allows you to require other mods to be loaded and
                initialized prior to initializing this mod.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="Dependency" type="DependencyType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="FileType">
        <xs:attribute name="name" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The name of the file to be loaded for this module.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="FilesType">
        <xs:annotation>
            <xs:documentation>
                This element contains the list of files to be loaded for this module.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="File" type="FileType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CreateWindowType">
        <xs:annotation>
            <xs:documentation>
                This element defines the command for creating a single window.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="name" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>A valid window definition name.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="show" type="xs:boolean" use="required">
            <xs:annotation>
                <xs:documentation>Should the window be shown after it is created?</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="CallFunctionType">
        <xs:annotation>
            <xs:documentation>
                This element defines the command for calling a single script function.
                When included in OnInitialize or OnShutdown, this is called with no parameters.
                When included in OnUpdate, this is called with a single 'seconds elapsed' parameter.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="name" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The name of the Lua function to call.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="OnInitializeType">
        <xs:annotation>
            <xs:documentation>
                This element allows you to provide initialization instructions for the mod.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="CreateWindow" type="CreateWindowType" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="CallFunction" type="CallFunctionType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="OnUpdateType">
        <xs:annotation>
            <xs:documentation>
                This element allows you to provide update instructions for the mod.

                Note: You can improve performance by reducing the number of Update callbacks
                that you include. If you only need updates when a particular window is showing,
                it is better to add an OnUpdate callback to the window itself, rather than the entire mod.
                This is designed for 'System' updates that do not correspond to a single window and
                are needed at all times.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="CreateWindow" type="CreateWindowType" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="CallFunction" type="CallFunctionType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="OnShutdownType">
        <xs:annotation>
            <xs:documentation>
                This element allows you to provide shutdown instructions for the mod.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="CallFunction" type="CallFunctionType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ReplacesType">
        <xs:attribute name="name" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The name of the module that this module replaces.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="UiModType">
        <xs:annotation>
            <xs:documentation>
                This defines the UI module properties.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="Author" type="AuthorType" minOccurs="1" maxOccurs="1"/>
            <xs:element name="Description" type="DescriptionType" minOccurs="1" maxOccurs="1"/>
            <xs:element name="Dependencies" type="DependenciesType" minOccurs="0" maxOccurs="1"/>
            <xs:element name="Replaces" type="ReplacesType" minOccurs="0" maxOccurs="1"/>
            <xs:element name="Files" type="FilesType" minOccurs="1" maxOccurs="1"/>
            <xs:element name="OnInitialize" type="OnInitializeType" minOccurs="0" maxOccurs="1"/>
            <xs:element name="OnUpdate" type="OnUpdateType" minOccurs="0" maxOccurs="1"/>
            <xs:element name="OnShutdown" type="OnShutdownType" minOccurs="0" maxOccurs="1"/>
        </xs:all>
        <xs:attribute name="name" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The name of the Module, this must be unique.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="version" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The version number of this module.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="date" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The date this module was last updated.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="ModuleFileType">
        <xs:annotation>
            <xs:documentation>
                This is the top level xml-tag for each UI module xml file.
                All other elements must be contained within the ModuleFile tag.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="UiMod" type="UiModType"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Add ModuleFile as a top-level element -->
    <xs:element name="ModuleFile" type="ModuleFileType">
        <xs:annotation>
            <xs:documentation>
                UiModFormat.xsd

                This schema defines the format for UI module (.mod) files.
                The .mod file contains metadata about a portion of the interface.

                To add new elements to the game interface, you must create a new UI module, or "UiMod".
                Each UiMod is described by a single .mod file which tells the Interface System
                what files to load and how to initialize your component.
            </xs:documentation>
        </xs:annotation>
    </xs:element>
</xs:schema>


